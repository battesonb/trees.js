{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Components/Camera.ts","src/Components/Canvas.ts","src/Components/Colliders/AABB.ts","src/Components/Colliders/Collider.ts","src/Components/EventSystem.ts","src/Components/Renderer.ts","src/Components/SpatialHash.ts","src/Models/Node.ts","src/Models/Tree.ts","src/Types/Point2D.ts","src/main.ts"],"names":[],"mappings":"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","file":"trees.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Point2D from \"../Types/Point2D\";\r\n\r\nexport default class Camera {\r\n  position: Point2D;\r\n  private zoom: number;\r\n\r\n  constructor(x: number = 0, y: number = 0, zoom: number = 1) {\r\n    this.position = new Point2D(x, y);\r\n    this.setZoom(zoom);\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    this.zoom = Math.max(0.35, Math.min(50, zoom));\r\n  }\r\n\r\n  getZoom(): number {\r\n    return this.zoom;\r\n  }\r\n\r\n  decZoom(amt: number, x: number, y: number) {\r\n    let newZoom: number = this.zoom - amt;\r\n    this.setZoom(newZoom);\r\n  }\r\n}","export default class Canvas {\r\n  dom: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n\r\n  private fontSize: number;\r\n  private fontFamily: string;\r\n\r\n  constructor(id: string) {\r\n    this.dom = <HTMLCanvasElement>document.getElementById(id);\r\n    this.context = this.dom.getContext(\"2d\");\r\n\r\n    this.context.textBaseline = \"top\";\r\n\r\n    this.fontSize = 18;\r\n    this.fontFamily = \"Arial\";\r\n    this._updateFont();\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.dom.width;\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.dom.height;\r\n  }\r\n\r\n  clear(): void {\r\n    this.context.clearRect(0, 0, this.dom.width, this.dom.height);\r\n  }\r\n\r\n  getTextWidth(text: string): number {\r\n    return this.context.measureText(text).width;\r\n  }\r\n\r\n  setFill(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.fillStyle = style;\r\n  }\r\n\r\n  setStroke(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.strokeStyle = style;\r\n  }\r\n\r\n  setStrokeSize(size: number = 1): void {\r\n    this.context.lineWidth = size;\r\n  }\r\n\r\n  setFontSize(size: number): void {\r\n    this.fontSize = size;\r\n    this._updateFont();\r\n  }\r\n\r\n  setFontFamily(family: string): void {\r\n    this.fontFamily = family;\r\n    this._updateFont();\r\n  }\r\n\r\n  _updateFont(): void {\r\n    this.context.font = this.fontSize + \"px \" + this.fontFamily;\r\n  }\r\n\r\n  drawRect(x: number, y: number, w: number, h: number, stroke?: boolean, shadow?: boolean): void {\r\n    if(stroke) {\r\n      this.context.strokeRect(x, y, w, h);\r\n    } else {\r\n      this.context.fillRect(x, y, w, h);\r\n    }\r\n  }\r\n  \r\n  drawArc(x: number, y: number, r: number, startAngle: number, endAngle: number, stroke?: boolean): void {\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, r, startAngle, endAngle);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  drawLine(x1: number, y1: number, x2: number, y2: number): void {\r\n    this.context.beginPath();\r\n    this.context.moveTo(x1, y1);\r\n    this.context.lineTo(x2, y2);\r\n    this.context.closePath();\r\n    this.context.stroke();\r\n  }\r\n\r\n  // TODO add line-wrap\r\n  drawText(text: string, x: number, y: number, stroke?: boolean, maxWidth?: number): void {\r\n    if(stroke) {\r\n      this.context.strokeText(text, x, y);\r\n    } else {\r\n      this.context.fillText(text, x, y);\r\n    }\r\n  }\r\n\r\n  drawRoundedRect(x: number, y: number, w: number, h: number, r: number, stroke?: boolean): void {\r\n    if (w < 2 * r) r = w / 2;\r\n    if (h < 2 * r) r = h / 2;\r\n    this.context.beginPath();\r\n    this.context.moveTo(x + r, y);\r\n    this.context.arcTo(x + w, y, x + w, y + h, r);\r\n    this.context.arcTo(x + w, y + h, x, y + h, r);\r\n    this.context.arcTo(x, y + h, x, y, r);\r\n    this.context.arcTo(x, y, x + w, y, r);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  enableShadows(blur: number, offsetX: number = 0, offsetY: number = 0, color: string = \"black\") {\r\n    this.context.shadowBlur = 8;\r\n    this.context.shadowColor = color;\r\n    this.context.shadowOffsetX = offsetX;\r\n    this.context.shadowOffsetY = offsetY;\r\n  }\r\n\r\n  clearShadows() {\r\n    this.context.shadowBlur = 0;\r\n    this.context.shadowOffsetX = 0;\r\n    this.context.shadowOffsetY = 0;\r\n  }\r\n}","import Collider from \"./Collider\";\r\nimport Point2D from \"../../Types/Point2D\";\r\n\r\n/**\r\n * Represents an AABB with top-left alignment.\r\n */\r\nexport default class AABB extends Collider {\r\n  private width: number;\r\n  private height: number;\r\n\r\n  constructor(x: number, y: number, width: number = 0, height: number = 0) {\r\n    super(x, y);\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  contains(x: number, y: number): boolean {\r\n    return x >= this.position.x && y >= this.position.y && x <= this.position.x + this.getWidth() && y <= this.position.y + this.getHeight();\r\n  }\r\n\r\n  overlaps(other: Collider): boolean {\r\n    if(other instanceof AABB) {\r\n      return Math.abs(this.position.x - other.position.x) * 2 < this.getWidth() + other.getWidth() &&\r\n             Math.abs(this.position.y - other.position.y) * 2 < this.getHeight() + other.getHeight();\r\n    }\r\n    throw Error(\"Unknown collider type, cannot determine overlap.\");\r\n  }\r\n\r\n  topLeft(): Point2D {\r\n    return this.position;\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.height;\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.width;\r\n  }\r\n\r\n  setHeight(height: number): void {\r\n    this.height = height;\r\n  }\r\n\r\n  setWidth(width: number): void {\r\n    this.width = width;\r\n  }\r\n}","import Point2D from \"../../Types/Point2D\";\r\n\r\nexport default abstract class Collider {\r\n  position: Point2D;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.position = new Point2D(x, y);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given point is within the collider.\r\n   * @param x\r\n   * @param y \r\n   */\r\n  abstract contains(x: number, y: number): boolean;\r\n\r\n  /**\r\n   * Returns true if the collider overlaps with the given collider.\r\n   * @param collider \r\n   */\r\n  abstract overlaps(other: Collider): boolean;\r\n\r\n  /**\r\n   * Returns the top-left position of the collider.\r\n   */\r\n  abstract topLeft(): Point2D;\r\n\r\n  abstract getHeight(): number;\r\n  abstract getWidth(): number;\r\n}","import Camera from \"./Camera\";\r\nimport Canvas from \"./Canvas\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport Point2D from \"../Types/Point2D\";\r\nimport Renderer from \"./Renderer\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nlet self: EventSystem;\r\n\r\nexport default class EventSystem {\r\n  private camera: Camera;\r\n  private canvas: Canvas;\r\n  private currentNode: Node;\r\n  private hash: SpatialHash;\r\n  private renderer: Renderer;\r\n  private x: number;\r\n  private y: number;\r\n\r\n  private moved: boolean;\r\n\r\n  constructor(camera: Camera, renderer: Renderer, canvas: Canvas, tree: Tree) {\r\n    self = this; // Ugly, but binds require handlers.\r\n    this.hash = new SpatialHash(); // TODO deterrmine this using the node sizes!\r\n    this.camera = camera;\r\n    this.canvas = canvas;\r\n    this.currentNode = null;\r\n    this.renderer = renderer;\r\n    this.moved = false;\r\n\r\n    tree.each((node: Node) => {\r\n      this.hash.add(node);\r\n    });\r\n\r\n    this.canvas.dom.addEventListener(\"mousedown\", this.mouseDown);\r\n    this.canvas.dom.addEventListener(\"mousemove\", this.mouseMove);\r\n    this.canvas.dom.addEventListener(\"mousewheel\", this.mouseWheel);\r\n\r\n    this.redraw();\r\n  }\r\n\r\n  private getEventPoint(event: MouseEvent): Point2D {\r\n    return new Point2D(event.offsetX, event.offsetY);\r\n  }\r\n\r\n  mouseDown(event: MouseEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    self.currentNode = <Node>self.hash.find(point.x / self.camera.getZoom() - self.camera.position.x, point.y / self.camera.getZoom() - self.camera.position.y);\r\n    if(self.currentNode) {\r\n      self.currentNode.bringToFront();\r\n    }\r\n    self.moved = false;\r\n\r\n    self.x = point.x;\r\n    self.y = point.y;\r\n    \r\n    window.addEventListener(\"mousemove\", self.mouseDrag);\r\n    window.addEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  mouseWheel(event: MouseWheelEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    self.camera.decZoom(event.deltaY / 250, point.x, point.y);\r\n    self.redraw();\r\n  }\r\n\r\n  mouseDrag(event: MouseEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    let dx = (point.x - self.x) / self.camera.getZoom();\r\n    let dy = (point.y - self.y) / self.camera.getZoom();\r\n    if(self.currentNode === null) {\r\n      self.camera.position.x+= dx;\r\n      self.camera.position.y+= dy;\r\n    } else {\r\n      self.hash.move(self.currentNode, dx, dy);\r\n    }\r\n    self.moved = true;\r\n\r\n    self.redraw();\r\n    self.x = point.x;\r\n    self.y = point.y;\r\n  }\r\n  \r\n  mouseMove(event: MouseEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    let hoverNode: Node = <Node>self.hash.find(point.x / self.camera.getZoom() - self.camera.position.x, point.y / self.camera.getZoom() - self.camera.position.y);\r\n    if(hoverNode) {\r\n      self.canvas.dom.style.cursor = \"pointer\";\r\n    } else {\r\n      self.canvas.dom.style.cursor = \"auto\";\r\n    }\r\n  }\r\n\r\n  mouseUp(event: MouseEvent) {\r\n    if(!self.moved) {\r\n      self.renderer.setSelectedNode(self.currentNode);\r\n      self.redraw();\r\n    }\r\n    self.currentNode = null;\r\n    window.removeEventListener(\"mousemove\", self.mouseDrag);\r\n    window.removeEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  redraw(): void {\r\n    self.renderer.clear();\r\n    self.renderer.drawTree();\r\n    //self.renderer.drawHashGroups(self.hash); // Debug Spatial Hash\r\n  }\r\n}","import Canvas from \"./Canvas\";\r\nimport Camera from \"./Camera\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nexport default class Renderer {\r\n  private canvas: Canvas;\r\n  private camera: Camera;\r\n  private tree: Tree;\r\n  private options: any;\r\n\r\n  private selectedNode: Node;\r\n  \r\n  constructor(camera: Camera, canvas: Canvas, tree: Tree, options: any) {\r\n    this.canvas = canvas;\r\n    this.camera = camera;\r\n    this.tree = tree;\r\n    this.options = options;\r\n\r\n    this.canvas.setFontFamily(options.text.family);\r\n\r\n    // TODO Set up node widths/heights/padding\r\n    this.tree.each((node: Node) => {\r\n      node.setWidth(this.canvas.getTextWidth(node.getText()) + this.options.node.padding * 3);\r\n      node.setHeight(this.options.text.size + this.options.node.padding * 2);\r\n    });\r\n  }\r\n\r\n  clear(): void {\r\n    this.canvas.clear();\r\n  }\r\n\r\n  drawTree(): void {\r\n    this.tree.each((node: Node) => {\r\n      this.drawPaths(node);\r\n    });\r\n\r\n    this.tree.each((node: Node) => {\r\n      if(node === this.selectedNode) {\r\n        this.drawNode(node, true);\r\n      } else {\r\n        this.drawNode(node);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A debugging method for visualising how the spatial hash looks.\r\n   */\r\n  drawHashGroups(hash: SpatialHash): void {\r\n    this.canvas.setStroke(\"#77BBFF\");\r\n    this.canvas.setStrokeSize(0.5);\r\n    this.canvas.clearShadows();\r\n\r\n    let hor = (this.camera.position.x % hash.getBucketSize()) * this.camera.getZoom();\r\n    while(hor < this.canvas.getWidth()) {\r\n      this.canvas.drawLine(hor, 0, hor, this.canvas.getHeight());\r\n      hor += hash.getBucketSize() * this.camera.getZoom();\r\n    }\r\n\r\n    let vert = (this.camera.position.y % hash.getBucketSize()) * this.camera.getZoom();\r\n    while(vert < this.canvas.getHeight()) {\r\n      this.canvas.drawLine(0, vert, this.canvas.getWidth(), vert);\r\n      vert += hash.getBucketSize() * this.camera.getZoom();\r\n    }\r\n  }\r\n\r\n  drawNode(node: Node, selected?: boolean): void {\r\n    if(this.options.shadow.node.blur > 0) {\r\n      this.canvas.enableShadows(this.options.shadow.node.blur, this.options.shadow.node.offsetX * this.camera.getZoom(), this.options.shadow.node.offsetY * this.camera.getZoom(), this.options.shadow.node.color);\r\n    } else {\r\n      this.canvas.clearShadows();\r\n    }\r\n    if(selected) {\r\n      this.canvas.setStroke(this.options.node.selected.stroke.color);\r\n      this.canvas.setStrokeSize(this.options.node.selected.stroke.size);\r\n      this.canvas.setFill(this.options.node.selected.color);\r\n    } else {\r\n      this.canvas.setStroke(this.options.node.stroke.color);\r\n      this.canvas.setStrokeSize(this.options.node.stroke.size);\r\n      this.canvas.setFill(this.options.node.color);\r\n    }\r\n    this.canvas.drawRoundedRect((node.position.x + this.camera.position.x) * this.camera.getZoom(), (node.position.y + this.camera.position.y) * this.camera.getZoom(), node.getWidth() * this.camera.getZoom(), node.getHeight() * this.camera.getZoom(), this.options.node.rounded * this.camera.getZoom(), false);\r\n  \r\n    if(this.options.shadow.text.blur > 0) {\r\n      this.canvas.enableShadows(this.options.shadow.text.blur, this.options.shadow.text.offsetX * this.camera.getZoom(), this.options.shadow.text.offsetY * this.camera.getZoom(), this.options.shadow.text.color);\r\n    } else {\r\n      this.canvas.clearShadows();\r\n    }\r\n    this.canvas.setFontSize(this.options.text.size * this.camera.getZoom());\r\n    this.canvas.setStroke(this.options.text.stroke.color);\r\n    this.canvas.setStrokeSize(this.options.text.stroke.size);\r\n    this.canvas.setFill(this.options.text.color);\r\n    this.canvas.drawText(node.getText(), (node.position.x + this.camera.position.x + this.options.node.padding) * this.camera.getZoom(), (node.position.y + this.camera.position.y + this.options.node.padding) * this.camera.getZoom(), this.options.text.stroke.size > 0, 100 * this.camera.getZoom());\r\n  }\r\n\r\n  drawPaths(node: Node): void {\r\n    if(this.options.shadow.path.blur > 0) {\r\n      this.canvas.enableShadows(this.options.shadow.path.blur, this.options.shadow.path.offsetX * this.camera.getZoom(), this.options.shadow.path.offsetY * this.camera.getZoom(), this.options.shadow.path.color);\r\n    } else {\r\n      this.canvas.clearShadows();\r\n    }\r\n    this.canvas.setStroke(this.options.path.color);\r\n    this.canvas.setStrokeSize(this.options.path.size);\r\n    for(let i = 0; i < node.childCount(); i++) {\r\n      let child: Node = node.getChildAt(i);\r\n      this.canvas.drawLine((node.position.x + node.getWidth() / 2 + this.camera.position.x) * this.camera.getZoom(), (node.position.y + node.getHeight() / 2 + this.camera.position.y) * this.camera.getZoom(), (child.position.x + child.getWidth() / 2 + this.camera.position.x) * this.camera.getZoom(), (child.position.y + child.getHeight() / 2 + this.camera.position.y) * this.camera.getZoom());\r\n    }\r\n  }\r\n\r\n  setSelectedNode(node: Node): void {\r\n    this.selectedNode = node;\r\n  }\r\n}","import Collider from './Colliders/Collider';\r\nimport Point2D from '../Types/Point2D';\r\n\r\n/**\r\n * A spatial hash based on AABB world coordinates.\r\n */\r\nexport default class SpatialHash {\r\n  private bucketSize: number;\r\n  private inverseBucketSize: number;\r\n  private map: object;\r\n\r\n  constructor(bucketSize: number = 100) {\r\n    this.map = {};\r\n    this.bucketSize = bucketSize;\r\n    this.inverseBucketSize = 1 / bucketSize;\r\n  }\r\n\r\n  getBucketSize(): number {\r\n    return this.bucketSize;\r\n  }\r\n\r\n  /**\r\n   * Given a collider, return the points within the hash in which the collider lies.\r\n   * @param collider The collider\r\n   */\r\n  getPoints(collider: Collider) : Array<Point2D> {\r\n    let points: Array<Point2D> = [];\r\n    let position: Point2D = collider.topLeft();\r\n    let width: number = collider.getWidth();\r\n    let height: number = collider.getHeight();\r\n\r\n    for(let moveH: number = Math.floor(position.x * this.inverseBucketSize); moveH * this.bucketSize <= position.x + width; moveH+= 1) {\r\n      for(let moveV: number = Math.floor(position.y * this.inverseBucketSize); moveV * this.bucketSize <= position.y + height; moveV+= 1) {\r\n        let x: number = moveH * this.bucketSize;\r\n        let y: number = moveV * this.bucketSize;\r\n        points.push(new Point2D(x, y));  \r\n      }\r\n    }\r\n\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Add a collider to the hash, assuming it is not already within the hash.\r\n   * @param collider\r\n   */\r\n  add(collider: Collider) : void {\r\n    let points: Array<Point2D> = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this.map[hash] === undefined) {\r\n        this.map[hash] = new Set();\r\n      }\r\n      this.map[hash].add(collider);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the given collider from the hash and deletes any empty sets in the process.\r\n   * @param collider\r\n   * @return true if collider is removed, false otherwise.\r\n   */\r\n  remove(collider: Collider) : boolean {\r\n    let removed: boolean = false;\r\n    let points: Array<Point2D>  = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this.map[hash] !== undefined) {\r\n        if(this.map[hash].delete(collider)) {\r\n          removed = true;\r\n          if(this.map[hash].size == 0) {\r\n            delete this.map[hash];\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return an array of all colliders in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  getNearby(x: number, y: number): Array<Collider> {\r\n    let hash = this.toHashLong(x, y);\r\n    let set = this.map[hash];\r\n    if(set) {\r\n      return <Array<Collider>>Array.from(set);\r\n    }    \r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return the first collider containing the world-point in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  find(x: number, y: number): Collider {\r\n    let colliders: Array<Collider> = this.getNearby(x, y);\r\n    for(let i = 0; i < colliders.length; i++) {\r\n      if(colliders[i].contains(x, y)) {\r\n        return colliders[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Given a collider in the hash, move it by x and y points.\r\n   * @param collider\r\n   * @param x \r\n   * @param y \r\n   */\r\n  move(collider: Collider, x: number, y: number) : void {\r\n    this.remove(collider);\r\n    collider.position.x += x;\r\n    collider.position.y += y;\r\n    this.add(collider);\r\n  }\r\n\r\n  /**\r\n   * Convert a point to a unique 32-bit number representing the x/y coordinates in the hash.\r\n   * @param point\r\n   */\r\n  pointToHashLong(x: number, y: number): number {\r\n    x = Math.floor(x * this.inverseBucketSize) & 0xFFFF; // cast to 16-bit\r\n    y = (Math.floor(y * this.inverseBucketSize) & 0xFFFF) << 15; // cast to 16-bit and then shift 15-bits to the left.\r\n    return x | y;\r\n  }  \r\n\r\n  /**\r\n   * Convert a point to a unique 32-bit number representing the x/y coordinates in the hash.\r\n   * @param point\r\n   */\r\n  toHashLong(x: number, y: number): number {\r\n    x = Math.floor(x * this.inverseBucketSize) & 0xFFFF; // cast to 16-bit\r\n    y = (Math.floor(y * this.inverseBucketSize) & 0xFFFF) << 15; // cast to 16-bit and then shift 15-bits to the left.\r\n    return x | y;\r\n  }  \r\n}","import AABB from \"../Components/Colliders/AABB\";\r\n\r\n/**\r\n * The representation of a node of the tree.\r\n */\r\nexport default class Node extends AABB {\r\n  private id: number;\r\n  private children: Array<Node>;\r\n  private text: string;\r\n  parent: Node;\r\n\r\n  constructor(text: string, id: number = -1, x: number = 0, y: number = 0) {\r\n    super(x, y);\r\n    this.setText(text);\r\n    this.setId(id);\r\n    this.children = [];\r\n    this.setWidth(70); // TEMPORARY, TODO DELETE THIS\r\n    this.setHeight(24);\r\n  }\r\n\r\n  /**\r\n   * Sets the identifier of the node. Uniqueness of the identifier is not determined.\r\n   * @param id\r\n   */\r\n  setId(id: number): void {\r\n    this.id = id;\r\n  }\r\n\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n\r\n  setText(text: string): void {\r\n    this.text = text;\r\n  }\r\n\r\n  getText(): string {\r\n    return this.text;\r\n  }\r\n\r\n  /**\r\n   * Adds a child to the current node and sets the parent of the child as the object of the calling the method.\r\n   * @param child \r\n   */\r\n  addChild(child: Node): void {\r\n    this.children.push(child);\r\n    child.parent = this;\r\n  }\r\n\r\n  /**\r\n   * Gets the child with a specific identifier.\r\n   * TODO make faster with a binary search, maybe? Probably not though.\r\n   * - Unlikely if we reorder children with bringToFront.\r\n   * - Search time is O(n) and nodes aren't expected to have considerably many children.\r\n   *    - If this becomes the case, remove bringToFront and implement binary search.\r\n   * @param id\r\n   */\r\n  getChild(id: number): Node {\r\n    for(let i = 0; i < this.children.length; i++) {\r\n      let child = this.children[i];\r\n      if(child.getId() === id) {\r\n        return child;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Gets a child by its index.\r\n   * @param index\r\n   */\r\n  getChildAt(index: number): Node {\r\n    return this.children[index];\r\n  }\r\n\r\n  /**\r\n   * Returns the number of children this node has.\r\n   */\r\n  childCount(): number {\r\n    return this.children.length;\r\n  }\r\n\r\n  /**\r\n   * Performs a callback function on each child node of this node.\r\n   * @param callback\r\n   */\r\n  foreachChild(callback: (node: Node) => any): void {\r\n    for(let i = 0; i < this.children.length; i++) {\r\n      callback(this.getChildAt(i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Brings this node to the front of the parent's children.\r\n   */\r\n  bringToFront(): void {\r\n    let parent: Node = this.parent;\r\n    if(parent) {\r\n      for(let i = 0; i < parent.children.length; i++) {\r\n        if(parent.children[i] === this) {\r\n          parent.children.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n      parent.children.push(this);\r\n    }\r\n  }\r\n}","import Node from \"./Node\";\r\nimport Canvas from \"../Components/Canvas\";\r\n\r\nexport default class Tree {\r\n  private root: Node;\r\n\r\n  /**\r\n   * Builds the tree given a nested json object representing the nodes of the tree.\r\n   * Allowed attributes include: text, x, y, children, and id.\r\n   * @param json Representation of the tree.\r\n   * @param canvas Canvas object for measuring width/height and determining text-wrapping of nodes.\r\n   */\r\n  constructor(json: object, canvas: Canvas) {\r\n    this.addNode(json);\r\n  }\r\n\r\n  private addNode(descent: object, node?: Node) {\r\n    if(descent !== undefined) {\r\n      if(descent[\"text\"] !== undefined) {\r\n        let id = descent[\"id\"] !== undefined ? descent[\"id\"] : -1;\r\n        let x = descent[\"x\"] !== undefined ? descent[\"x\"] : 0;\r\n        let y = descent[\"y\"] !== undefined ? descent[\"y\"] : 0;\r\n        let child = new Node(descent[\"text\"], id, x, y);\r\n        if(node === undefined) {\r\n          this.root = child;\r\n          node = this.root;\r\n        } else {\r\n          node.addChild(child);\r\n        }\r\n        if(descent[\"children\"] !== undefined) {\r\n          for(let i = 0; i < descent[\"children\"].length; i++) {\r\n            this.addNode(descent[\"children\"][i], node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a callback on each node of this tree. Default behaviour is a depth-first on\r\n   * the root node.\r\n   * TODO add breadth-first descent.\r\n   * @param callback\r\n   * @param breadthFirst Defaults to false.\r\n   * @param node The node to start the descent from.\r\n   * @param level Start counting levels from this parameter's value.\r\n   */\r\n  each(callback: (node: Node) => any, breadthFirst?: boolean, node: Node = this.root, level: number = 0): void {\r\n    if(node !== undefined && node !== null) {\r\n      callback(node);\r\n      for(let i = 0; i < node.childCount(); i++) {\r\n        this.each(callback, breadthFirst, node.getChildAt(i), level + 1);\r\n      }\r\n    }\r\n  }\r\n}","export default class Point2D {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}","import Camera from \"./Components/Camera\";\r\nimport Canvas from \"./Components/Canvas\";\r\nimport EventSystem from \"./Components/EventSystem\";\r\nimport Renderer from \"./Components/Renderer\";\r\nimport Tree from \"./Models/Tree\";\r\n\r\nexport default class TreesJS {\r\n  private camera: Camera;\r\n  private canvas: Canvas;\r\n  private eventSystem: EventSystem;\r\n  private renderer: Renderer;\r\n  private tree: Tree;\r\n\r\n  constructor(id: string, json: object, options?: any) {\r\n    if(options === undefined) {\r\n      options = {};\r\n    }\r\n\r\n    if(options.node === undefined) {\r\n      options.node = {};\r\n    }\r\n    if(options.node.color === undefined) {\r\n      options.node.color = \"#55AAFF\";\r\n    }\r\n    if(options.node.rounded === undefined) {\r\n      options.node.rounded = 4;\r\n    }\r\n    if(options.node.padding === undefined) {\r\n      options.node.padding = 4;\r\n    }\r\n    if(options.node.stroke === undefined) {\r\n      options.node.stroke = {};\r\n    }\r\n    if(options.node.stroke.color === undefined) {\r\n      options.node.stroke.color = \"#000\";\r\n    }\r\n    if(options.node.stroke.size === undefined) {\r\n      options.node.stroke.size = 0;\r\n    }\r\n    if(options.node.selected === undefined) {\r\n      options.node.selected = {};\r\n    }\r\n    if(options.node.selected.color === undefined) {\r\n      options.node.selected.color = \"#FFAA55\";\r\n    }\r\n    if(options.node.selected.stroke === undefined) {\r\n      options.node.selected.stroke = {};\r\n    }\r\n    if(options.node.selected.stroke.color === undefined) {\r\n      options.node.selected.stroke.color = \"#000\";\r\n    }\r\n    if(options.node.selected.stroke.size === undefined) {\r\n      options.node.selected.stroke.size = 1;\r\n    }\r\n\r\n    if(options.path === undefined) {\r\n      options.path = {};\r\n    }\r\n    if(options.path.color === undefined) {\r\n      options.path.color = \"#55AAFF\";\r\n    }\r\n    if(options.path.size === undefined) {\r\n      options.path.size = 2;\r\n    }\r\n\r\n    if(options.text === undefined) {\r\n      options.text = {};\r\n    }\r\n    if(options.text.color === undefined) {\r\n      options.text.color = \"#FFF\";\r\n    }\r\n    if(options.text.family === undefined) {\r\n      options.text.family = \"Arial\";\r\n    }\r\n    if(options.text.size === undefined) {\r\n      options.text.size = 18;\r\n    }\r\n    if(options.text.stroke === undefined) {\r\n      options.text.stroke = {};\r\n    }\r\n    if(options.text.stroke.color === undefined) {\r\n      options.text.stroke.color = \"#000\";\r\n    }\r\n    if(options.text.stroke.size === undefined) {\r\n      options.text.stroke.size = 0;\r\n    }\r\n\r\n    if(options.shadow === undefined) {\r\n      options.shadow = {};\r\n    }\r\n    if(options.shadow.node === undefined) {\r\n      options.shadow.node = {};\r\n    }\r\n    if(options.shadow.node.blur === undefined) {\r\n      options.shadow.node.blur = 8;\r\n    }\r\n    if(options.shadow.node.color === undefined) {\r\n      options.shadow.node.color = \"rgba(0, 0, 0, 0.25)\";\r\n    }\r\n    if(options.shadow.node.offsetX === undefined) {\r\n      options.shadow.node.offsetX = 0;\r\n    }\r\n    if(options.shadow.node.offsetY === undefined) {\r\n      options.shadow.node.offsetY = 4;\r\n    }\r\n    if(options.shadow.path === undefined) {\r\n      options.shadow.path = {};\r\n    }\r\n    if(options.shadow.path.blur === undefined) {\r\n      options.shadow.path.blur = 1;\r\n    }\r\n    if(options.shadow.path.color === undefined) {\r\n      options.shadow.path.color = \"rgba(0, 0, 0, 0.25)\";\r\n    }\r\n    if(options.shadow.path.offsetX === undefined) {\r\n      options.shadow.path.offsetX = 0;\r\n    }\r\n    if(options.shadow.path.offsetY === undefined) {\r\n      options.shadow.path.offsetY = 4;\r\n    }\r\n    if(options.shadow.text === undefined) {\r\n      options.shadow.text = {};\r\n    }\r\n    if(options.shadow.text.blur === undefined) {\r\n      options.shadow.text.blur = 1;\r\n    }\r\n    if(options.shadow.text.color === undefined) {\r\n      options.shadow.text.color = \"rgba(0, 0, 0, 0.3)\";\r\n    }\r\n    if(options.shadow.text.offsetX === undefined) {\r\n      options.shadow.text.offsetX = 0;\r\n    }\r\n    if(options.shadow.text.offsetY === undefined) {\r\n      options.shadow.text.offsetY = 0;\r\n    }\r\n\r\n    this.camera = new Camera(0, 0, 1);\r\n    this.canvas = new Canvas(id);\r\n    this.tree = new Tree(json, this.canvas);\r\n    this.renderer = new Renderer(this.camera, this.canvas, this.tree, options);\r\n    this.eventSystem = new EventSystem(this.camera, this.renderer, this.canvas, this.tree);\r\n  }\r\n}\r\n\r\n/*\r\n// Example of options object.\r\noptions = {\r\n  node: {\r\n    color: \"#FFAA55\",\r\n    rounded: 5,\r\n    padding: 5,\r\n    stroke: {\r\n      color: \"#000\"\r\n      size: 0\r\n    },\r\n    selected {\r\n      color: \"#FFAA55\",\r\n      stroke: {\r\n        color: \"#000\"\r\n        size: 0\r\n      }\r\n    }\r\n  },\r\n  path: {\r\n    color: \"#55AAFF\",\r\n    size: 2\r\n  },\r\n  text: {\r\n    color: \"#FFF\",\r\n    family: \"Arial\",\r\n    size: 18,\r\n    stroke: {\r\n      color: \"#000\",\r\n      size: 0\r\n    }\r\n  },\r\n  shadow: {\r\n    node: {\r\n      blur: 8,\r\n      color: \"rgba(0, 0, 0, 0.25)\",\r\n      offsetX: 0,\r\n      offsetY: 4\r\n    },\r\n    path: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    },\r\n    text: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n(<any>window).TreesJS = TreesJS;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvQ29tcG9uZW50cy9DYW1lcmEudHMiLCJzcmMvQ29tcG9uZW50cy9DYW52YXMudHMiLCJzcmMvQ29tcG9uZW50cy9Db2xsaWRlcnMvQUFCQi50cyIsInNyYy9Db21wb25lbnRzL0NvbGxpZGVycy9Db2xsaWRlci50cyIsInNyYy9Db21wb25lbnRzL0V2ZW50U3lzdGVtLnRzIiwic3JjL0NvbXBvbmVudHMvUmVuZGVyZXIudHMiLCJzcmMvQ29tcG9uZW50cy9TcGF0aWFsSGFzaC50cyIsInNyYy9Nb2RlbHMvTm9kZS50cyIsInNyYy9Nb2RlbHMvVHJlZS50cyIsInNyYy9UeXBlcy9Qb2ludDJELnRzIiwic3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUNBQSwwQkFBdUM7QUFFdkM7QUFJRSxnQkFBWSxJQUFZLEFBQUMsR0FBRSxJQUFZLEFBQUMsR0FBRSxPQUFlLEFBQUM7QUFDeEQsQUFBSSxhQUFDLEFBQVEsV0FBRyxJQUFJLFVBQU8sUUFBQyxBQUFDLEdBQUUsQUFBQyxBQUFDLEFBQUM7QUFDbEMsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsQUFBQyxBQUNyQjtBQUFDO0FBRUQsQUFBTyxZQUFDLEFBQVk7QUFDbEIsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUksTUFBRSxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUUsSUFBRSxBQUFJLEFBQUMsQUFBQyxBQUFDLEFBQ2pEO0FBQUM7QUFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFDbkI7QUFBQztBQUVELEFBQU8sWUFBQyxBQUFXLEtBQUUsQUFBUyxHQUFFLEFBQVM7QUFDdkMsWUFBSSxBQUFPLFVBQVcsQUFBSSxLQUFDLEFBQUksT0FBRyxBQUFHLEFBQUM7QUFDdEMsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFPLEFB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QU8sVUFBRyxBQUFPLEFBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IFBvaW50MkQgZnJvbSBcIi4uL1R5cGVzL1BvaW50MkRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbWVyYSB7XHJcbiAgcG9zaXRpb246IFBvaW50MkQ7XHJcbiAgcHJpdmF0ZSB6b29tOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIHpvb206IG51bWJlciA9IDEpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUG9pbnQyRCh4LCB5KTtcclxuICAgIHRoaXMuc2V0Wm9vbSh6b29tKTtcclxuICB9XHJcblxyXG4gIHNldFpvb20oem9vbTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnpvb20gPSBNYXRoLm1heCgwLjM1LCBNYXRoLm1pbig1MCwgem9vbSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Wm9vbSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuem9vbTtcclxuICB9XHJcblxyXG4gIGRlY1pvb20oYW10OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICBsZXQgbmV3Wm9vbTogbnVtYmVyID0gdGhpcy56b29tIC0gYW10O1xyXG4gICAgdGhpcy5zZXRab29tKG5ld1pvb20pO1xyXG4gIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XHJcbiAgZG9tOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG4gIHByaXZhdGUgZm9udFNpemU6IG51bWJlcjtcclxuICBwcml2YXRlIGZvbnRGYW1pbHk6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5kb20gPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5kb20uZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgIHRoaXMuY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xyXG5cclxuICAgIHRoaXMuZm9udFNpemUgPSAxODtcclxuICAgIHRoaXMuZm9udEZhbWlseSA9IFwiQXJpYWxcIjtcclxuICAgIHRoaXMuX3VwZGF0ZUZvbnQoKTtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5kb20ud2lkdGg7XHJcbiAgfVxyXG5cclxuICBnZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmRvbS5oZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpOiB2b2lkIHtcclxuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5kb20ud2lkdGgsIHRoaXMuZG9tLmhlaWdodCk7XHJcbiAgfVxyXG5cclxuICBnZXRUZXh0V2lkdGgodGV4dDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XHJcbiAgfVxyXG5cclxuICBzZXRGaWxsKHN0eWxlOiBzdHJpbmcgfCBDYW52YXNHcmFkaWVudCB8IENhbnZhc1BhdHRlcm4pOiB2b2lkIHtcclxuICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBzdHlsZTtcclxuICB9XHJcblxyXG4gIHNldFN0cm9rZShzdHlsZTogc3RyaW5nIHwgQ2FudmFzR3JhZGllbnQgfCBDYW52YXNQYXR0ZXJuKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHlsZTtcclxuICB9XHJcblxyXG4gIHNldFN0cm9rZVNpemUoc2l6ZTogbnVtYmVyID0gMSk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0LmxpbmVXaWR0aCA9IHNpemU7XHJcbiAgfVxyXG5cclxuICBzZXRGb250U2l6ZShzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuZm9udFNpemUgPSBzaXplO1xyXG4gICAgdGhpcy5fdXBkYXRlRm9udCgpO1xyXG4gIH1cclxuXHJcbiAgc2V0Rm9udEZhbWlseShmYW1pbHk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5mb250RmFtaWx5ID0gZmFtaWx5O1xyXG4gICAgdGhpcy5fdXBkYXRlRm9udCgpO1xyXG4gIH1cclxuXHJcbiAgX3VwZGF0ZUZvbnQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRleHQuZm9udCA9IHRoaXMuZm9udFNpemUgKyBcInB4IFwiICsgdGhpcy5mb250RmFtaWx5O1xyXG4gIH1cclxuXHJcbiAgZHJhd1JlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyLCBzdHJva2U/OiBib29sZWFuLCBzaGFkb3c/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZihzdHJva2UpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZVJlY3QoeCwgeSwgdywgaCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGRyYXdBcmMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHI6IG51bWJlciwgc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyLCBzdHJva2U/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjKHgsIHksIHIsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcclxuICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGlmKHN0cm9rZSkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJhd0xpbmUoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4MSwgeTEpO1xyXG4gICAgdGhpcy5jb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xyXG4gICAgdGhpcy5jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyBhZGQgbGluZS13cmFwXHJcbiAgZHJhd1RleHQodGV4dDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgc3Ryb2tlPzogYm9vbGVhbiwgbWF4V2lkdGg/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmKHN0cm9rZSkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCB4LCB5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdSb3VuZGVkUmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIHI6IG51bWJlciwgc3Ryb2tlPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKHcgPCAyICogcikgciA9IHcgLyAyO1xyXG4gICAgaWYgKGggPCAyICogcikgciA9IGggLyAyO1xyXG4gICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4ICsgciwgeSk7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjVG8oeCArIHcsIHksIHggKyB3LCB5ICsgaCwgcik7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjVG8oeCArIHcsIHkgKyBoLCB4LCB5ICsgaCwgcik7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjVG8oeCwgeSArIGgsIHgsIHksIHIpO1xyXG4gICAgdGhpcy5jb250ZXh0LmFyY1RvKHgsIHksIHggKyB3LCB5LCByKTtcclxuICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGlmKHN0cm9rZSkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW5hYmxlU2hhZG93cyhibHVyOiBudW1iZXIsIG9mZnNldFg6IG51bWJlciA9IDAsIG9mZnNldFk6IG51bWJlciA9IDAsIGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCIpIHtcclxuICAgIHRoaXMuY29udGV4dC5zaGFkb3dCbHVyID0gODtcclxuICAgIHRoaXMuY29udGV4dC5zaGFkb3dDb2xvciA9IGNvbG9yO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFggPSBvZmZzZXRYO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFkgPSBvZmZzZXRZO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJTaGFkb3dzKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gIH1cclxufSIsImltcG9ydCBDb2xsaWRlciBmcm9tIFwiLi9Db2xsaWRlclwiO1xyXG5pbXBvcnQgUG9pbnQyRCBmcm9tIFwiLi4vLi4vVHlwZXMvUG9pbnQyRFwiO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gQUFCQiB3aXRoIHRvcC1sZWZ0IGFsaWdubWVudC5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFBQkIgZXh0ZW5kcyBDb2xsaWRlciB7XHJcbiAgcHJpdmF0ZSB3aWR0aDogbnVtYmVyO1xyXG4gIHByaXZhdGUgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyID0gMCwgaGVpZ2h0OiBudW1iZXIgPSAwKSB7XHJcbiAgICBzdXBlcih4LCB5KTtcclxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgY29udGFpbnMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB4ID49IHRoaXMucG9zaXRpb24ueCAmJiB5ID49IHRoaXMucG9zaXRpb24ueSAmJiB4IDw9IHRoaXMucG9zaXRpb24ueCArIHRoaXMuZ2V0V2lkdGgoKSAmJiB5IDw9IHRoaXMucG9zaXRpb24ueSArIHRoaXMuZ2V0SGVpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICBvdmVybGFwcyhvdGhlcjogQ29sbGlkZXIpOiBib29sZWFuIHtcclxuICAgIGlmKG90aGVyIGluc3RhbmNlb2YgQUFCQikge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5wb3NpdGlvbi54IC0gb3RoZXIucG9zaXRpb24ueCkgKiAyIDwgdGhpcy5nZXRXaWR0aCgpICsgb3RoZXIuZ2V0V2lkdGgoKSAmJlxyXG4gICAgICAgICAgICAgTWF0aC5hYnModGhpcy5wb3NpdGlvbi55IC0gb3RoZXIucG9zaXRpb24ueSkgKiAyIDwgdGhpcy5nZXRIZWlnaHQoKSArIG90aGVyLmdldEhlaWdodCgpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgRXJyb3IoXCJVbmtub3duIGNvbGxpZGVyIHR5cGUsIGNhbm5vdCBkZXRlcm1pbmUgb3ZlcmxhcC5cIik7XHJcbiAgfVxyXG5cclxuICB0b3BMZWZ0KCk6IFBvaW50MkQge1xyXG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBnZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmhlaWdodDtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy53aWR0aDtcclxuICB9XHJcblxyXG4gIHNldEhlaWdodChoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBzZXRXaWR0aCh3aWR0aDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgfVxyXG59IiwiaW1wb3J0IFBvaW50MkQgZnJvbSBcIi4uLy4uL1R5cGVzL1BvaW50MkRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIENvbGxpZGVyIHtcclxuICBwb3NpdGlvbjogUG9pbnQyRDtcclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUG9pbnQyRCh4LCB5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcG9pbnQgaXMgd2l0aGluIHRoZSBjb2xsaWRlci5cclxuICAgKiBAcGFyYW0geFxyXG4gICAqIEBwYXJhbSB5IFxyXG4gICAqL1xyXG4gIGFic3RyYWN0IGNvbnRhaW5zKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjb2xsaWRlciBvdmVybGFwcyB3aXRoIHRoZSBnaXZlbiBjb2xsaWRlci5cclxuICAgKiBAcGFyYW0gY29sbGlkZXIgXHJcbiAgICovXHJcbiAgYWJzdHJhY3Qgb3ZlcmxhcHMob3RoZXI6IENvbGxpZGVyKTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgdG9wLWxlZnQgcG9zaXRpb24gb2YgdGhlIGNvbGxpZGVyLlxyXG4gICAqL1xyXG4gIGFic3RyYWN0IHRvcExlZnQoKTogUG9pbnQyRDtcclxuXHJcbiAgYWJzdHJhY3QgZ2V0SGVpZ2h0KCk6IG51bWJlcjtcclxuICBhYnN0cmFjdCBnZXRXaWR0aCgpOiBudW1iZXI7XHJcbn0iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuL0NhbWVyYVwiO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gXCIuL0NhbnZhc1wiO1xyXG5pbXBvcnQgTm9kZSBmcm9tIFwiLi4vTW9kZWxzL05vZGVcIjtcclxuaW1wb3J0IFRyZWUgZnJvbSBcIi4uL01vZGVscy9UcmVlXCI7XHJcbmltcG9ydCBQb2ludDJEIGZyb20gXCIuLi9UeXBlcy9Qb2ludDJEXCI7XHJcbmltcG9ydCBSZW5kZXJlciBmcm9tIFwiLi9SZW5kZXJlclwiO1xyXG5pbXBvcnQgU3BhdGlhbEhhc2ggZnJvbSBcIi4vU3BhdGlhbEhhc2hcIjtcclxuXHJcbmxldCBzZWxmOiBFdmVudFN5c3RlbTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50U3lzdGVtIHtcclxuICBwcml2YXRlIGNhbWVyYTogQ2FtZXJhO1xyXG4gIHByaXZhdGUgY2FudmFzOiBDYW52YXM7XHJcbiAgcHJpdmF0ZSBjdXJyZW50Tm9kZTogTm9kZTtcclxuICBwcml2YXRlIGhhc2g6IFNwYXRpYWxIYXNoO1xyXG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyO1xyXG4gIHByaXZhdGUgeDogbnVtYmVyO1xyXG4gIHByaXZhdGUgeTogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIG1vdmVkOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjYW1lcmE6IENhbWVyYSwgcmVuZGVyZXI6IFJlbmRlcmVyLCBjYW52YXM6IENhbnZhcywgdHJlZTogVHJlZSkge1xyXG4gICAgc2VsZiA9IHRoaXM7IC8vIFVnbHksIGJ1dCBiaW5kcyByZXF1aXJlIGhhbmRsZXJzLlxyXG4gICAgdGhpcy5oYXNoID0gbmV3IFNwYXRpYWxIYXNoKCk7IC8vIFRPRE8gZGV0ZXJybWluZSB0aGlzIHVzaW5nIHRoZSBub2RlIHNpemVzIVxyXG4gICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XHJcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgIHRoaXMuY3VycmVudE5vZGUgPSBudWxsO1xyXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5tb3ZlZCA9IGZhbHNlO1xyXG5cclxuICAgIHRyZWUuZWFjaCgobm9kZTogTm9kZSkgPT4ge1xyXG4gICAgICB0aGlzLmhhc2guYWRkKG5vZGUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5jYW52YXMuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5tb3VzZURvd24pO1xyXG4gICAgdGhpcy5jYW52YXMuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgdGhpcy5jYW52YXMuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXdoZWVsXCIsIHRoaXMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgdGhpcy5yZWRyYXcoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0RXZlbnRQb2ludChldmVudDogTW91c2VFdmVudCk6IFBvaW50MkQge1xyXG4gICAgcmV0dXJuIG5ldyBQb2ludDJEKGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFkpO1xyXG4gIH1cclxuXHJcbiAgbW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICBsZXQgcG9pbnQ6IFBvaW50MkQgPSBzZWxmLmdldEV2ZW50UG9pbnQoZXZlbnQpO1xyXG4gICAgc2VsZi5jdXJyZW50Tm9kZSA9IDxOb2RlPnNlbGYuaGFzaC5maW5kKHBvaW50LnggLyBzZWxmLmNhbWVyYS5nZXRab29tKCkgLSBzZWxmLmNhbWVyYS5wb3NpdGlvbi54LCBwb2ludC55IC8gc2VsZi5jYW1lcmEuZ2V0Wm9vbSgpIC0gc2VsZi5jYW1lcmEucG9zaXRpb24ueSk7XHJcbiAgICBpZihzZWxmLmN1cnJlbnROb2RlKSB7XHJcbiAgICAgIHNlbGYuY3VycmVudE5vZGUuYnJpbmdUb0Zyb250KCk7XHJcbiAgICB9XHJcbiAgICBzZWxmLm1vdmVkID0gZmFsc2U7XHJcblxyXG4gICAgc2VsZi54ID0gcG9pbnQueDtcclxuICAgIHNlbGYueSA9IHBvaW50Lnk7XHJcbiAgICBcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHNlbGYubW91c2VEcmFnKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBzZWxmLm1vdXNlVXApO1xyXG4gIH1cclxuXHJcbiAgbW91c2VXaGVlbChldmVudDogTW91c2VXaGVlbEV2ZW50KSB7XHJcbiAgICBsZXQgcG9pbnQ6IFBvaW50MkQgPSBzZWxmLmdldEV2ZW50UG9pbnQoZXZlbnQpO1xyXG4gICAgc2VsZi5jYW1lcmEuZGVjWm9vbShldmVudC5kZWx0YVkgLyAyNTAsIHBvaW50LngsIHBvaW50LnkpO1xyXG4gICAgc2VsZi5yZWRyYXcoKTtcclxuICB9XHJcblxyXG4gIG1vdXNlRHJhZyhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgbGV0IHBvaW50OiBQb2ludDJEID0gc2VsZi5nZXRFdmVudFBvaW50KGV2ZW50KTtcclxuICAgIGxldCBkeCA9IChwb2ludC54IC0gc2VsZi54KSAvIHNlbGYuY2FtZXJhLmdldFpvb20oKTtcclxuICAgIGxldCBkeSA9IChwb2ludC55IC0gc2VsZi55KSAvIHNlbGYuY2FtZXJhLmdldFpvb20oKTtcclxuICAgIGlmKHNlbGYuY3VycmVudE5vZGUgPT09IG51bGwpIHtcclxuICAgICAgc2VsZi5jYW1lcmEucG9zaXRpb24ueCs9IGR4O1xyXG4gICAgICBzZWxmLmNhbWVyYS5wb3NpdGlvbi55Kz0gZHk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZWxmLmhhc2gubW92ZShzZWxmLmN1cnJlbnROb2RlLCBkeCwgZHkpO1xyXG4gICAgfVxyXG4gICAgc2VsZi5tb3ZlZCA9IHRydWU7XHJcblxyXG4gICAgc2VsZi5yZWRyYXcoKTtcclxuICAgIHNlbGYueCA9IHBvaW50Lng7XHJcbiAgICBzZWxmLnkgPSBwb2ludC55O1xyXG4gIH1cclxuICBcclxuICBtb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIGxldCBwb2ludDogUG9pbnQyRCA9IHNlbGYuZ2V0RXZlbnRQb2ludChldmVudCk7XHJcbiAgICBsZXQgaG92ZXJOb2RlOiBOb2RlID0gPE5vZGU+c2VsZi5oYXNoLmZpbmQocG9pbnQueCAvIHNlbGYuY2FtZXJhLmdldFpvb20oKSAtIHNlbGYuY2FtZXJhLnBvc2l0aW9uLngsIHBvaW50LnkgLyBzZWxmLmNhbWVyYS5nZXRab29tKCkgLSBzZWxmLmNhbWVyYS5wb3NpdGlvbi55KTtcclxuICAgIGlmKGhvdmVyTm9kZSkge1xyXG4gICAgICBzZWxmLmNhbnZhcy5kb20uc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZWxmLmNhbnZhcy5kb20uc3R5bGUuY3Vyc29yID0gXCJhdXRvXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZVVwKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICBpZighc2VsZi5tb3ZlZCkge1xyXG4gICAgICBzZWxmLnJlbmRlcmVyLnNldFNlbGVjdGVkTm9kZShzZWxmLmN1cnJlbnROb2RlKTtcclxuICAgICAgc2VsZi5yZWRyYXcoKTtcclxuICAgIH1cclxuICAgIHNlbGYuY3VycmVudE5vZGUgPSBudWxsO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2VsZi5tb3VzZURyYWcpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHNlbGYubW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICByZWRyYXcoKTogdm9pZCB7XHJcbiAgICBzZWxmLnJlbmRlcmVyLmNsZWFyKCk7XHJcbiAgICBzZWxmLnJlbmRlcmVyLmRyYXdUcmVlKCk7XHJcbiAgICAvL3NlbGYucmVuZGVyZXIuZHJhd0hhc2hHcm91cHMoc2VsZi5oYXNoKTsgLy8gRGVidWcgU3BhdGlhbCBIYXNoXHJcbiAgfVxyXG59IiwiaW1wb3J0IENhbnZhcyBmcm9tIFwiLi9DYW52YXNcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9DYW1lcmFcIjtcclxuaW1wb3J0IE5vZGUgZnJvbSBcIi4uL01vZGVscy9Ob2RlXCI7XHJcbmltcG9ydCBUcmVlIGZyb20gXCIuLi9Nb2RlbHMvVHJlZVwiO1xyXG5pbXBvcnQgU3BhdGlhbEhhc2ggZnJvbSBcIi4vU3BhdGlhbEhhc2hcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcclxuICBwcml2YXRlIGNhbnZhczogQ2FudmFzO1xyXG4gIHByaXZhdGUgY2FtZXJhOiBDYW1lcmE7XHJcbiAgcHJpdmF0ZSB0cmVlOiBUcmVlO1xyXG4gIHByaXZhdGUgb3B0aW9uczogYW55O1xyXG5cclxuICBwcml2YXRlIHNlbGVjdGVkTm9kZTogTm9kZTtcclxuICBcclxuICBjb25zdHJ1Y3RvcihjYW1lcmE6IENhbWVyYSwgY2FudmFzOiBDYW52YXMsIHRyZWU6IFRyZWUsIG9wdGlvbnM6IGFueSkge1xyXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYTtcclxuICAgIHRoaXMudHJlZSA9IHRyZWU7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuICAgIHRoaXMuY2FudmFzLnNldEZvbnRGYW1pbHkob3B0aW9ucy50ZXh0LmZhbWlseSk7XHJcblxyXG4gICAgLy8gVE9ETyBTZXQgdXAgbm9kZSB3aWR0aHMvaGVpZ2h0cy9wYWRkaW5nXHJcbiAgICB0aGlzLnRyZWUuZWFjaCgobm9kZTogTm9kZSkgPT4ge1xyXG4gICAgICBub2RlLnNldFdpZHRoKHRoaXMuY2FudmFzLmdldFRleHRXaWR0aChub2RlLmdldFRleHQoKSkgKyB0aGlzLm9wdGlvbnMubm9kZS5wYWRkaW5nICogMyk7XHJcbiAgICAgIG5vZGUuc2V0SGVpZ2h0KHRoaXMub3B0aW9ucy50ZXh0LnNpemUgKyB0aGlzLm9wdGlvbnMubm9kZS5wYWRkaW5nICogMik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jYW52YXMuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIGRyYXdUcmVlKCk6IHZvaWQge1xyXG4gICAgdGhpcy50cmVlLmVhY2goKG5vZGU6IE5vZGUpID0+IHtcclxuICAgICAgdGhpcy5kcmF3UGF0aHMobm9kZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRyZWUuZWFjaCgobm9kZTogTm9kZSkgPT4ge1xyXG4gICAgICBpZihub2RlID09PSB0aGlzLnNlbGVjdGVkTm9kZSkge1xyXG4gICAgICAgIHRoaXMuZHJhd05vZGUobm9kZSwgdHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5kcmF3Tm9kZShub2RlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBIGRlYnVnZ2luZyBtZXRob2QgZm9yIHZpc3VhbGlzaW5nIGhvdyB0aGUgc3BhdGlhbCBoYXNoIGxvb2tzLlxyXG4gICAqL1xyXG4gIGRyYXdIYXNoR3JvdXBzKGhhc2g6IFNwYXRpYWxIYXNoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNhbnZhcy5zZXRTdHJva2UoXCIjNzdCQkZGXCIpO1xyXG4gICAgdGhpcy5jYW52YXMuc2V0U3Ryb2tlU2l6ZSgwLjUpO1xyXG4gICAgdGhpcy5jYW52YXMuY2xlYXJTaGFkb3dzKCk7XHJcblxyXG4gICAgbGV0IGhvciA9ICh0aGlzLmNhbWVyYS5wb3NpdGlvbi54ICUgaGFzaC5nZXRCdWNrZXRTaXplKCkpICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpO1xyXG4gICAgd2hpbGUoaG9yIDwgdGhpcy5jYW52YXMuZ2V0V2lkdGgoKSkge1xyXG4gICAgICB0aGlzLmNhbnZhcy5kcmF3TGluZShob3IsIDAsIGhvciwgdGhpcy5jYW52YXMuZ2V0SGVpZ2h0KCkpO1xyXG4gICAgICBob3IgKz0gaGFzaC5nZXRCdWNrZXRTaXplKCkgKiB0aGlzLmNhbWVyYS5nZXRab29tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHZlcnQgPSAodGhpcy5jYW1lcmEucG9zaXRpb24ueSAlIGhhc2guZ2V0QnVja2V0U2l6ZSgpKSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKTtcclxuICAgIHdoaWxlKHZlcnQgPCB0aGlzLmNhbnZhcy5nZXRIZWlnaHQoKSkge1xyXG4gICAgICB0aGlzLmNhbnZhcy5kcmF3TGluZSgwLCB2ZXJ0LCB0aGlzLmNhbnZhcy5nZXRXaWR0aCgpLCB2ZXJ0KTtcclxuICAgICAgdmVydCArPSBoYXNoLmdldEJ1Y2tldFNpemUoKSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdOb2RlKG5vZGU6IE5vZGUsIHNlbGVjdGVkPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYodGhpcy5vcHRpb25zLnNoYWRvdy5ub2RlLmJsdXIgPiAwKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLmVuYWJsZVNoYWRvd3ModGhpcy5vcHRpb25zLnNoYWRvdy5ub2RlLmJsdXIsIHRoaXMub3B0aW9ucy5zaGFkb3cubm9kZS5vZmZzZXRYICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpLCB0aGlzLm9wdGlvbnMuc2hhZG93Lm5vZGUub2Zmc2V0WSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgdGhpcy5vcHRpb25zLnNoYWRvdy5ub2RlLmNvbG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyU2hhZG93cygpO1xyXG4gICAgfVxyXG4gICAgaWYoc2VsZWN0ZWQpIHtcclxuICAgICAgdGhpcy5jYW52YXMuc2V0U3Ryb2tlKHRoaXMub3B0aW9ucy5ub2RlLnNlbGVjdGVkLnN0cm9rZS5jb2xvcik7XHJcbiAgICAgIHRoaXMuY2FudmFzLnNldFN0cm9rZVNpemUodGhpcy5vcHRpb25zLm5vZGUuc2VsZWN0ZWQuc3Ryb2tlLnNpemUpO1xyXG4gICAgICB0aGlzLmNhbnZhcy5zZXRGaWxsKHRoaXMub3B0aW9ucy5ub2RlLnNlbGVjdGVkLmNvbG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLnNldFN0cm9rZSh0aGlzLm9wdGlvbnMubm9kZS5zdHJva2UuY29sb3IpO1xyXG4gICAgICB0aGlzLmNhbnZhcy5zZXRTdHJva2VTaXplKHRoaXMub3B0aW9ucy5ub2RlLnN0cm9rZS5zaXplKTtcclxuICAgICAgdGhpcy5jYW52YXMuc2V0RmlsbCh0aGlzLm9wdGlvbnMubm9kZS5jb2xvcik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNhbnZhcy5kcmF3Um91bmRlZFJlY3QoKG5vZGUucG9zaXRpb24ueCArIHRoaXMuY2FtZXJhLnBvc2l0aW9uLngpICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpLCAobm9kZS5wb3NpdGlvbi55ICsgdGhpcy5jYW1lcmEucG9zaXRpb24ueSkgKiB0aGlzLmNhbWVyYS5nZXRab29tKCksIG5vZGUuZ2V0V2lkdGgoKSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgbm9kZS5nZXRIZWlnaHQoKSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgdGhpcy5vcHRpb25zLm5vZGUucm91bmRlZCAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgZmFsc2UpO1xyXG4gIFxyXG4gICAgaWYodGhpcy5vcHRpb25zLnNoYWRvdy50ZXh0LmJsdXIgPiAwKSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLmVuYWJsZVNoYWRvd3ModGhpcy5vcHRpb25zLnNoYWRvdy50ZXh0LmJsdXIsIHRoaXMub3B0aW9ucy5zaGFkb3cudGV4dC5vZmZzZXRYICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpLCB0aGlzLm9wdGlvbnMuc2hhZG93LnRleHQub2Zmc2V0WSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgdGhpcy5vcHRpb25zLnNoYWRvdy50ZXh0LmNvbG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyU2hhZG93cygpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jYW52YXMuc2V0Rm9udFNpemUodGhpcy5vcHRpb25zLnRleHQuc2l6ZSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSk7XHJcbiAgICB0aGlzLmNhbnZhcy5zZXRTdHJva2UodGhpcy5vcHRpb25zLnRleHQuc3Ryb2tlLmNvbG9yKTtcclxuICAgIHRoaXMuY2FudmFzLnNldFN0cm9rZVNpemUodGhpcy5vcHRpb25zLnRleHQuc3Ryb2tlLnNpemUpO1xyXG4gICAgdGhpcy5jYW52YXMuc2V0RmlsbCh0aGlzLm9wdGlvbnMudGV4dC5jb2xvcik7XHJcbiAgICB0aGlzLmNhbnZhcy5kcmF3VGV4dChub2RlLmdldFRleHQoKSwgKG5vZGUucG9zaXRpb24ueCArIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnggKyB0aGlzLm9wdGlvbnMubm9kZS5wYWRkaW5nKSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgKG5vZGUucG9zaXRpb24ueSArIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnkgKyB0aGlzLm9wdGlvbnMubm9kZS5wYWRkaW5nKSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgdGhpcy5vcHRpb25zLnRleHQuc3Ryb2tlLnNpemUgPiAwLCAxMDAgKiB0aGlzLmNhbWVyYS5nZXRab29tKCkpO1xyXG4gIH1cclxuXHJcbiAgZHJhd1BhdGhzKG5vZGU6IE5vZGUpOiB2b2lkIHtcclxuICAgIGlmKHRoaXMub3B0aW9ucy5zaGFkb3cucGF0aC5ibHVyID4gMCkge1xyXG4gICAgICB0aGlzLmNhbnZhcy5lbmFibGVTaGFkb3dzKHRoaXMub3B0aW9ucy5zaGFkb3cucGF0aC5ibHVyLCB0aGlzLm9wdGlvbnMuc2hhZG93LnBhdGgub2Zmc2V0WCAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgdGhpcy5vcHRpb25zLnNoYWRvdy5wYXRoLm9mZnNldFkgKiB0aGlzLmNhbWVyYS5nZXRab29tKCksIHRoaXMub3B0aW9ucy5zaGFkb3cucGF0aC5jb2xvcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNhbnZhcy5jbGVhclNoYWRvd3MoKTtcclxuICAgIH1cclxuICAgIHRoaXMuY2FudmFzLnNldFN0cm9rZSh0aGlzLm9wdGlvbnMucGF0aC5jb2xvcik7XHJcbiAgICB0aGlzLmNhbnZhcy5zZXRTdHJva2VTaXplKHRoaXMub3B0aW9ucy5wYXRoLnNpemUpO1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRDb3VudCgpOyBpKyspIHtcclxuICAgICAgbGV0IGNoaWxkOiBOb2RlID0gbm9kZS5nZXRDaGlsZEF0KGkpO1xyXG4gICAgICB0aGlzLmNhbnZhcy5kcmF3TGluZSgobm9kZS5wb3NpdGlvbi54ICsgbm9kZS5nZXRXaWR0aCgpIC8gMiArIHRoaXMuY2FtZXJhLnBvc2l0aW9uLngpICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpLCAobm9kZS5wb3NpdGlvbi55ICsgbm9kZS5nZXRIZWlnaHQoKSAvIDIgKyB0aGlzLmNhbWVyYS5wb3NpdGlvbi55KSAqIHRoaXMuY2FtZXJhLmdldFpvb20oKSwgKGNoaWxkLnBvc2l0aW9uLnggKyBjaGlsZC5nZXRXaWR0aCgpIC8gMiArIHRoaXMuY2FtZXJhLnBvc2l0aW9uLngpICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpLCAoY2hpbGQucG9zaXRpb24ueSArIGNoaWxkLmdldEhlaWdodCgpIC8gMiArIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnkpICogdGhpcy5jYW1lcmEuZ2V0Wm9vbSgpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFNlbGVjdGVkTm9kZShub2RlOiBOb2RlKTogdm9pZCB7XHJcbiAgICB0aGlzLnNlbGVjdGVkTm9kZSA9IG5vZGU7XHJcbiAgfVxyXG59IiwiaW1wb3J0IENvbGxpZGVyIGZyb20gJy4vQ29sbGlkZXJzL0NvbGxpZGVyJztcclxuaW1wb3J0IFBvaW50MkQgZnJvbSAnLi4vVHlwZXMvUG9pbnQyRCc7XHJcblxyXG4vKipcclxuICogQSBzcGF0aWFsIGhhc2ggYmFzZWQgb24gQUFCQiB3b3JsZCBjb29yZGluYXRlcy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwYXRpYWxIYXNoIHtcclxuICBwcml2YXRlIGJ1Y2tldFNpemU6IG51bWJlcjtcclxuICBwcml2YXRlIGludmVyc2VCdWNrZXRTaXplOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBtYXA6IG9iamVjdDtcclxuXHJcbiAgY29uc3RydWN0b3IoYnVja2V0U2l6ZTogbnVtYmVyID0gMTAwKSB7XHJcbiAgICB0aGlzLm1hcCA9IHt9O1xyXG4gICAgdGhpcy5idWNrZXRTaXplID0gYnVja2V0U2l6ZTtcclxuICAgIHRoaXMuaW52ZXJzZUJ1Y2tldFNpemUgPSAxIC8gYnVja2V0U2l6ZTtcclxuICB9XHJcblxyXG4gIGdldEJ1Y2tldFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmJ1Y2tldFNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHaXZlbiBhIGNvbGxpZGVyLCByZXR1cm4gdGhlIHBvaW50cyB3aXRoaW4gdGhlIGhhc2ggaW4gd2hpY2ggdGhlIGNvbGxpZGVyIGxpZXMuXHJcbiAgICogQHBhcmFtIGNvbGxpZGVyIFRoZSBjb2xsaWRlclxyXG4gICAqL1xyXG4gIGdldFBvaW50cyhjb2xsaWRlcjogQ29sbGlkZXIpIDogQXJyYXk8UG9pbnQyRD4ge1xyXG4gICAgbGV0IHBvaW50czogQXJyYXk8UG9pbnQyRD4gPSBbXTtcclxuICAgIGxldCBwb3NpdGlvbjogUG9pbnQyRCA9IGNvbGxpZGVyLnRvcExlZnQoKTtcclxuICAgIGxldCB3aWR0aDogbnVtYmVyID0gY29sbGlkZXIuZ2V0V2lkdGgoKTtcclxuICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IGNvbGxpZGVyLmdldEhlaWdodCgpO1xyXG5cclxuICAgIGZvcihsZXQgbW92ZUg6IG51bWJlciA9IE1hdGguZmxvb3IocG9zaXRpb24ueCAqIHRoaXMuaW52ZXJzZUJ1Y2tldFNpemUpOyBtb3ZlSCAqIHRoaXMuYnVja2V0U2l6ZSA8PSBwb3NpdGlvbi54ICsgd2lkdGg7IG1vdmVIKz0gMSkge1xyXG4gICAgICBmb3IobGV0IG1vdmVWOiBudW1iZXIgPSBNYXRoLmZsb29yKHBvc2l0aW9uLnkgKiB0aGlzLmludmVyc2VCdWNrZXRTaXplKTsgbW92ZVYgKiB0aGlzLmJ1Y2tldFNpemUgPD0gcG9zaXRpb24ueSArIGhlaWdodDsgbW92ZVYrPSAxKSB7XHJcbiAgICAgICAgbGV0IHg6IG51bWJlciA9IG1vdmVIICogdGhpcy5idWNrZXRTaXplO1xyXG4gICAgICAgIGxldCB5OiBudW1iZXIgPSBtb3ZlViAqIHRoaXMuYnVja2V0U2l6ZTtcclxuICAgICAgICBwb2ludHMucHVzaChuZXcgUG9pbnQyRCh4LCB5KSk7ICBcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb2ludHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYSBjb2xsaWRlciB0byB0aGUgaGFzaCwgYXNzdW1pbmcgaXQgaXMgbm90IGFscmVhZHkgd2l0aGluIHRoZSBoYXNoLlxyXG4gICAqIEBwYXJhbSBjb2xsaWRlclxyXG4gICAqL1xyXG4gIGFkZChjb2xsaWRlcjogQ29sbGlkZXIpIDogdm9pZCB7XHJcbiAgICBsZXQgcG9pbnRzOiBBcnJheTxQb2ludDJEPiA9IHRoaXMuZ2V0UG9pbnRzKGNvbGxpZGVyKTtcclxuXHJcbiAgICBwb2ludHMuZm9yRWFjaChwb2ludCA9PiB7XHJcbiAgICAgIGxldCBoYXNoID0gdGhpcy50b0hhc2hMb25nKHBvaW50LngsIHBvaW50LnkpO1xyXG4gICAgICBpZih0aGlzLm1hcFtoYXNoXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5tYXBbaGFzaF0gPSBuZXcgU2V0KCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tYXBbaGFzaF0uYWRkKGNvbGxpZGVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gY29sbGlkZXIgZnJvbSB0aGUgaGFzaCBhbmQgZGVsZXRlcyBhbnkgZW1wdHkgc2V0cyBpbiB0aGUgcHJvY2Vzcy5cclxuICAgKiBAcGFyYW0gY29sbGlkZXJcclxuICAgKiBAcmV0dXJuIHRydWUgaWYgY29sbGlkZXIgaXMgcmVtb3ZlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIHJlbW92ZShjb2xsaWRlcjogQ29sbGlkZXIpIDogYm9vbGVhbiB7XHJcbiAgICBsZXQgcmVtb3ZlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbGV0IHBvaW50czogQXJyYXk8UG9pbnQyRD4gID0gdGhpcy5nZXRQb2ludHMoY29sbGlkZXIpO1xyXG5cclxuICAgIHBvaW50cy5mb3JFYWNoKHBvaW50ID0+IHtcclxuICAgICAgbGV0IGhhc2ggPSB0aGlzLnRvSGFzaExvbmcocG9pbnQueCwgcG9pbnQueSk7XHJcbiAgICAgIGlmKHRoaXMubWFwW2hhc2hdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZih0aGlzLm1hcFtoYXNoXS5kZWxldGUoY29sbGlkZXIpKSB7XHJcbiAgICAgICAgICByZW1vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgIGlmKHRoaXMubWFwW2hhc2hdLnNpemUgPT0gMCkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5tYXBbaGFzaF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVtb3ZlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdpdmVuIGEgd29ybGQtcG9pbnQsIHJldHVybiBhbiBhcnJheSBvZiBhbGwgY29sbGlkZXJzIGluIHRoZSBjb3JyZXNwb25kaW5nIHNlZ21lbnQuXHJcbiAgICogQHBhcmFtIHggXHJcbiAgICogQHBhcmFtIHkgXHJcbiAgICovXHJcbiAgZ2V0TmVhcmJ5KHg6IG51bWJlciwgeTogbnVtYmVyKTogQXJyYXk8Q29sbGlkZXI+IHtcclxuICAgIGxldCBoYXNoID0gdGhpcy50b0hhc2hMb25nKHgsIHkpO1xyXG4gICAgbGV0IHNldCA9IHRoaXMubWFwW2hhc2hdO1xyXG4gICAgaWYoc2V0KSB7XHJcbiAgICAgIHJldHVybiA8QXJyYXk8Q29sbGlkZXI+PkFycmF5LmZyb20oc2V0KTtcclxuICAgIH0gICAgXHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHaXZlbiBhIHdvcmxkLXBvaW50LCByZXR1cm4gdGhlIGZpcnN0IGNvbGxpZGVyIGNvbnRhaW5pbmcgdGhlIHdvcmxkLXBvaW50IGluIHRoZSBjb3JyZXNwb25kaW5nIHNlZ21lbnQuXHJcbiAgICogQHBhcmFtIHggXHJcbiAgICogQHBhcmFtIHkgXHJcbiAgICovXHJcbiAgZmluZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IENvbGxpZGVyIHtcclxuICAgIGxldCBjb2xsaWRlcnM6IEFycmF5PENvbGxpZGVyPiA9IHRoaXMuZ2V0TmVhcmJ5KHgsIHkpO1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbGxpZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZihjb2xsaWRlcnNbaV0uY29udGFpbnMoeCwgeSkpIHtcclxuICAgICAgICByZXR1cm4gY29sbGlkZXJzW2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdpdmVuIGEgY29sbGlkZXIgaW4gdGhlIGhhc2gsIG1vdmUgaXQgYnkgeCBhbmQgeSBwb2ludHMuXHJcbiAgICogQHBhcmFtIGNvbGxpZGVyXHJcbiAgICogQHBhcmFtIHggXHJcbiAgICogQHBhcmFtIHkgXHJcbiAgICovXHJcbiAgbW92ZShjb2xsaWRlcjogQ29sbGlkZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmUoY29sbGlkZXIpO1xyXG4gICAgY29sbGlkZXIucG9zaXRpb24ueCArPSB4O1xyXG4gICAgY29sbGlkZXIucG9zaXRpb24ueSArPSB5O1xyXG4gICAgdGhpcy5hZGQoY29sbGlkZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBhIHBvaW50IHRvIGEgdW5pcXVlIDMyLWJpdCBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSB4L3kgY29vcmRpbmF0ZXMgaW4gdGhlIGhhc2guXHJcbiAgICogQHBhcmFtIHBvaW50XHJcbiAgICovXHJcbiAgcG9pbnRUb0hhc2hMb25nKHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHggPSBNYXRoLmZsb29yKHggKiB0aGlzLmludmVyc2VCdWNrZXRTaXplKSAmIDB4RkZGRjsgLy8gY2FzdCB0byAxNi1iaXRcclxuICAgIHkgPSAoTWF0aC5mbG9vcih5ICogdGhpcy5pbnZlcnNlQnVja2V0U2l6ZSkgJiAweEZGRkYpIDw8IDE1OyAvLyBjYXN0IHRvIDE2LWJpdCBhbmQgdGhlbiBzaGlmdCAxNS1iaXRzIHRvIHRoZSBsZWZ0LlxyXG4gICAgcmV0dXJuIHggfCB5O1xyXG4gIH0gIFxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0IGEgcG9pbnQgdG8gYSB1bmlxdWUgMzItYml0IG51bWJlciByZXByZXNlbnRpbmcgdGhlIHgveSBjb29yZGluYXRlcyBpbiB0aGUgaGFzaC5cclxuICAgKiBAcGFyYW0gcG9pbnRcclxuICAgKi9cclxuICB0b0hhc2hMb25nKHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHggPSBNYXRoLmZsb29yKHggKiB0aGlzLmludmVyc2VCdWNrZXRTaXplKSAmIDB4RkZGRjsgLy8gY2FzdCB0byAxNi1iaXRcclxuICAgIHkgPSAoTWF0aC5mbG9vcih5ICogdGhpcy5pbnZlcnNlQnVja2V0U2l6ZSkgJiAweEZGRkYpIDw8IDE1OyAvLyBjYXN0IHRvIDE2LWJpdCBhbmQgdGhlbiBzaGlmdCAxNS1iaXRzIHRvIHRoZSBsZWZ0LlxyXG4gICAgcmV0dXJuIHggfCB5O1xyXG4gIH0gIFxyXG59IiwiaW1wb3J0IEFBQkIgZnJvbSBcIi4uL0NvbXBvbmVudHMvQ29sbGlkZXJzL0FBQkJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVwcmVzZW50YXRpb24gb2YgYSBub2RlIG9mIHRoZSB0cmVlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9kZSBleHRlbmRzIEFBQkIge1xyXG4gIHByaXZhdGUgaWQ6IG51bWJlcjtcclxuICBwcml2YXRlIGNoaWxkcmVuOiBBcnJheTxOb2RlPjtcclxuICBwcml2YXRlIHRleHQ6IHN0cmluZztcclxuICBwYXJlbnQ6IE5vZGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgaWQ6IG51bWJlciA9IC0xLCB4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKSB7XHJcbiAgICBzdXBlcih4LCB5KTtcclxuICAgIHRoaXMuc2V0VGV4dCh0ZXh0KTtcclxuICAgIHRoaXMuc2V0SWQoaWQpO1xyXG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG4gICAgdGhpcy5zZXRXaWR0aCg3MCk7IC8vIFRFTVBPUkFSWSwgVE9ETyBERUxFVEUgVEhJU1xyXG4gICAgdGhpcy5zZXRIZWlnaHQoMjQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgaWRlbnRpZmllciBvZiB0aGUgbm9kZS4gVW5pcXVlbmVzcyBvZiB0aGUgaWRlbnRpZmllciBpcyBub3QgZGV0ZXJtaW5lZC5cclxuICAgKiBAcGFyYW0gaWRcclxuICAgKi9cclxuICBzZXRJZChpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgfVxyXG5cclxuICBnZXRJZCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgfVxyXG5cclxuICBzZXRUZXh0KHRleHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICB9XHJcblxyXG4gIGdldFRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgY2hpbGQgdG8gdGhlIGN1cnJlbnQgbm9kZSBhbmQgc2V0cyB0aGUgcGFyZW50IG9mIHRoZSBjaGlsZCBhcyB0aGUgb2JqZWN0IG9mIHRoZSBjYWxsaW5nIHRoZSBtZXRob2QuXHJcbiAgICogQHBhcmFtIGNoaWxkIFxyXG4gICAqL1xyXG4gIGFkZENoaWxkKGNoaWxkOiBOb2RlKTogdm9pZCB7XHJcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgY2hpbGQucGFyZW50ID0gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGNoaWxkIHdpdGggYSBzcGVjaWZpYyBpZGVudGlmaWVyLlxyXG4gICAqIFRPRE8gbWFrZSBmYXN0ZXIgd2l0aCBhIGJpbmFyeSBzZWFyY2gsIG1heWJlPyBQcm9iYWJseSBub3QgdGhvdWdoLlxyXG4gICAqIC0gVW5saWtlbHkgaWYgd2UgcmVvcmRlciBjaGlsZHJlbiB3aXRoIGJyaW5nVG9Gcm9udC5cclxuICAgKiAtIFNlYXJjaCB0aW1lIGlzIE8obikgYW5kIG5vZGVzIGFyZW4ndCBleHBlY3RlZCB0byBoYXZlIGNvbnNpZGVyYWJseSBtYW55IGNoaWxkcmVuLlxyXG4gICAqICAgIC0gSWYgdGhpcyBiZWNvbWVzIHRoZSBjYXNlLCByZW1vdmUgYnJpbmdUb0Zyb250IGFuZCBpbXBsZW1lbnQgYmluYXJ5IHNlYXJjaC5cclxuICAgKiBAcGFyYW0gaWRcclxuICAgKi9cclxuICBnZXRDaGlsZChpZDogbnVtYmVyKTogTm9kZSB7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xyXG4gICAgICBpZihjaGlsZC5nZXRJZCgpID09PSBpZCkge1xyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGEgY2hpbGQgYnkgaXRzIGluZGV4LlxyXG4gICAqIEBwYXJhbSBpbmRleFxyXG4gICAqL1xyXG4gIGdldENoaWxkQXQoaW5kZXg6IG51bWJlcik6IE5vZGUge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoaXMgbm9kZSBoYXMuXHJcbiAgICovXHJcbiAgY2hpbGRDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybXMgYSBjYWxsYmFjayBmdW5jdGlvbiBvbiBlYWNoIGNoaWxkIG5vZGUgb2YgdGhpcyBub2RlLlxyXG4gICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAqL1xyXG4gIGZvcmVhY2hDaGlsZChjYWxsYmFjazogKG5vZGU6IE5vZGUpID0+IGFueSk6IHZvaWQge1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY2FsbGJhY2sodGhpcy5nZXRDaGlsZEF0KGkpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJyaW5ncyB0aGlzIG5vZGUgdG8gdGhlIGZyb250IG9mIHRoZSBwYXJlbnQncyBjaGlsZHJlbi5cclxuICAgKi9cclxuICBicmluZ1RvRnJvbnQoKTogdm9pZCB7XHJcbiAgICBsZXQgcGFyZW50OiBOb2RlID0gdGhpcy5wYXJlbnQ7XHJcbiAgICBpZihwYXJlbnQpIHtcclxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcmVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmKHBhcmVudC5jaGlsZHJlbltpXSA9PT0gdGhpcykge1xyXG4gICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaCh0aGlzKTtcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgTm9kZSBmcm9tIFwiLi9Ob2RlXCI7XHJcbmltcG9ydCBDYW52YXMgZnJvbSBcIi4uL0NvbXBvbmVudHMvQ2FudmFzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlIHtcclxuICBwcml2YXRlIHJvb3Q6IE5vZGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1aWxkcyB0aGUgdHJlZSBnaXZlbiBhIG5lc3RlZCBqc29uIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIG5vZGVzIG9mIHRoZSB0cmVlLlxyXG4gICAqIEFsbG93ZWQgYXR0cmlidXRlcyBpbmNsdWRlOiB0ZXh0LCB4LCB5LCBjaGlsZHJlbiwgYW5kIGlkLlxyXG4gICAqIEBwYXJhbSBqc29uIFJlcHJlc2VudGF0aW9uIG9mIHRoZSB0cmVlLlxyXG4gICAqIEBwYXJhbSBjYW52YXMgQ2FudmFzIG9iamVjdCBmb3IgbWVhc3VyaW5nIHdpZHRoL2hlaWdodCBhbmQgZGV0ZXJtaW5pbmcgdGV4dC13cmFwcGluZyBvZiBub2Rlcy5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihqc29uOiBvYmplY3QsIGNhbnZhczogQ2FudmFzKSB7XHJcbiAgICB0aGlzLmFkZE5vZGUoanNvbik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZE5vZGUoZGVzY2VudDogb2JqZWN0LCBub2RlPzogTm9kZSkge1xyXG4gICAgaWYoZGVzY2VudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlmKGRlc2NlbnRbXCJ0ZXh0XCJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsZXQgaWQgPSBkZXNjZW50W1wiaWRcIl0gIT09IHVuZGVmaW5lZCA/IGRlc2NlbnRbXCJpZFwiXSA6IC0xO1xyXG4gICAgICAgIGxldCB4ID0gZGVzY2VudFtcInhcIl0gIT09IHVuZGVmaW5lZCA/IGRlc2NlbnRbXCJ4XCJdIDogMDtcclxuICAgICAgICBsZXQgeSA9IGRlc2NlbnRbXCJ5XCJdICE9PSB1bmRlZmluZWQgPyBkZXNjZW50W1wieVwiXSA6IDA7XHJcbiAgICAgICAgbGV0IGNoaWxkID0gbmV3IE5vZGUoZGVzY2VudFtcInRleHRcIl0sIGlkLCB4LCB5KTtcclxuICAgICAgICBpZihub2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMucm9vdCA9IGNoaWxkO1xyXG4gICAgICAgICAgbm9kZSA9IHRoaXMucm9vdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbm9kZS5hZGRDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGRlc2NlbnRbXCJjaGlsZHJlblwiXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGVzY2VudFtcImNoaWxkcmVuXCJdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm9kZShkZXNjZW50W1wiY2hpbGRyZW5cIl1baV0sIG5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUGVyZm9ybXMgYSBjYWxsYmFjayBvbiBlYWNoIG5vZGUgb2YgdGhpcyB0cmVlLiBEZWZhdWx0IGJlaGF2aW91ciBpcyBhIGRlcHRoLWZpcnN0IG9uXHJcbiAgICogdGhlIHJvb3Qgbm9kZS5cclxuICAgKiBUT0RPIGFkZCBicmVhZHRoLWZpcnN0IGRlc2NlbnQuXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrXHJcbiAgICogQHBhcmFtIGJyZWFkdGhGaXJzdCBEZWZhdWx0cyB0byBmYWxzZS5cclxuICAgKiBAcGFyYW0gbm9kZSBUaGUgbm9kZSB0byBzdGFydCB0aGUgZGVzY2VudCBmcm9tLlxyXG4gICAqIEBwYXJhbSBsZXZlbCBTdGFydCBjb3VudGluZyBsZXZlbHMgZnJvbSB0aGlzIHBhcmFtZXRlcidzIHZhbHVlLlxyXG4gICAqL1xyXG4gIGVhY2goY2FsbGJhY2s6IChub2RlOiBOb2RlKSA9PiBhbnksIGJyZWFkdGhGaXJzdD86IGJvb2xlYW4sIG5vZGU6IE5vZGUgPSB0aGlzLnJvb3QsIGxldmVsOiBudW1iZXIgPSAwKTogdm9pZCB7XHJcbiAgICBpZihub2RlICE9PSB1bmRlZmluZWQgJiYgbm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICBjYWxsYmFjayhub2RlKTtcclxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRDb3VudCgpOyBpKyspIHtcclxuICAgICAgICB0aGlzLmVhY2goY2FsbGJhY2ssIGJyZWFkdGhGaXJzdCwgbm9kZS5nZXRDaGlsZEF0KGkpLCBsZXZlbCArIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnQyRCB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCkge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9Db21wb25lbnRzL0NhbWVyYVwiO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gXCIuL0NvbXBvbmVudHMvQ2FudmFzXCI7XHJcbmltcG9ydCBFdmVudFN5c3RlbSBmcm9tIFwiLi9Db21wb25lbnRzL0V2ZW50U3lzdGVtXCI7XHJcbmltcG9ydCBSZW5kZXJlciBmcm9tIFwiLi9Db21wb25lbnRzL1JlbmRlcmVyXCI7XHJcbmltcG9ydCBUcmVlIGZyb20gXCIuL01vZGVscy9UcmVlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlc0pTIHtcclxuICBwcml2YXRlIGNhbWVyYTogQ2FtZXJhO1xyXG4gIHByaXZhdGUgY2FudmFzOiBDYW52YXM7XHJcbiAgcHJpdmF0ZSBldmVudFN5c3RlbTogRXZlbnRTeXN0ZW07XHJcbiAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXI7XHJcbiAgcHJpdmF0ZSB0cmVlOiBUcmVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBqc29uOiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpIHtcclxuICAgIGlmKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgaWYob3B0aW9ucy5ub2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5ub2RlID0ge307XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLm5vZGUuY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLm5vZGUuY29sb3IgPSBcIiM1NUFBRkZcIjtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMubm9kZS5yb3VuZGVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5ub2RlLnJvdW5kZWQgPSA0O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5ub2RlLnBhZGRpbmcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLm5vZGUucGFkZGluZyA9IDQ7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLm5vZGUuc3Ryb2tlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5ub2RlLnN0cm9rZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5ub2RlLnN0cm9rZS5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMubm9kZS5zdHJva2UuY29sb3IgPSBcIiMwMDBcIjtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMubm9kZS5zdHJva2Uuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMubm9kZS5zdHJva2Uuc2l6ZSA9IDA7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLm5vZGUuc2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLm5vZGUuc2VsZWN0ZWQgPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMubm9kZS5zZWxlY3RlZC5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMubm9kZS5zZWxlY3RlZC5jb2xvciA9IFwiI0ZGQUE1NVwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5ub2RlLnNlbGVjdGVkLnN0cm9rZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMubm9kZS5zZWxlY3RlZC5zdHJva2UgPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMubm9kZS5zZWxlY3RlZC5zdHJva2UuY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLm5vZGUuc2VsZWN0ZWQuc3Ryb2tlLmNvbG9yID0gXCIjMDAwXCI7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLm5vZGUuc2VsZWN0ZWQuc3Ryb2tlLnNpemUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLm5vZGUuc2VsZWN0ZWQuc3Ryb2tlLnNpemUgPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKG9wdGlvbnMucGF0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMucGF0aCA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5wYXRoLmNvbG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5wYXRoLmNvbG9yID0gXCIjNTVBQUZGXCI7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnBhdGguc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMucGF0aC5zaXplID0gMjtcclxuICAgIH1cclxuXHJcbiAgICBpZihvcHRpb25zLnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnRleHQgPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMudGV4dC5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMudGV4dC5jb2xvciA9IFwiI0ZGRlwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy50ZXh0LmZhbWlseSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMudGV4dC5mYW1pbHkgPSBcIkFyaWFsXCI7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnRleHQuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMudGV4dC5zaXplID0gMTg7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnRleHQuc3Ryb2tlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy50ZXh0LnN0cm9rZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy50ZXh0LnN0cm9rZS5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMudGV4dC5zdHJva2UuY29sb3IgPSBcIiMwMDBcIjtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMudGV4dC5zdHJva2Uuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMudGV4dC5zdHJva2Uuc2l6ZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdyA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cubm9kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93Lm5vZGUgPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93Lm5vZGUuYmx1ciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93Lm5vZGUuYmx1ciA9IDg7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy5ub2RlLmNvbG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cubm9kZS5jb2xvciA9IFwicmdiYSgwLCAwLCAwLCAwLjI1KVwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cubm9kZS5vZmZzZXRYID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cubm9kZS5vZmZzZXRYID0gMDtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93Lm5vZGUub2Zmc2V0WSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93Lm5vZGUub2Zmc2V0WSA9IDQ7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy5wYXRoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cucGF0aCA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cucGF0aC5ibHVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cucGF0aC5ibHVyID0gMTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnBhdGguY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy5wYXRoLmNvbG9yID0gXCJyZ2JhKDAsIDAsIDAsIDAuMjUpXCI7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy5wYXRoLm9mZnNldFggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy5wYXRoLm9mZnNldFggPSAwO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cucGF0aC5vZmZzZXRZID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cucGF0aC5vZmZzZXRZID0gNDtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy50ZXh0ID0ge307XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy50ZXh0LmJsdXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy50ZXh0LmJsdXIgPSAxO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cudGV4dC5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93LnRleHQuY29sb3IgPSBcInJnYmEoMCwgMCwgMCwgMC4zKVwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cudGV4dC5vZmZzZXRYID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cudGV4dC5vZmZzZXRYID0gMDtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnRleHQub2Zmc2V0WSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93LnRleHQub2Zmc2V0WSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKDAsIDAsIDEpO1xyXG4gICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKGlkKTtcclxuICAgIHRoaXMudHJlZSA9IG5ldyBUcmVlKGpzb24sIHRoaXMuY2FudmFzKTtcclxuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIodGhpcy5jYW1lcmEsIHRoaXMuY2FudmFzLCB0aGlzLnRyZWUsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5ldmVudFN5c3RlbSA9IG5ldyBFdmVudFN5c3RlbSh0aGlzLmNhbWVyYSwgdGhpcy5yZW5kZXJlciwgdGhpcy5jYW52YXMsIHRoaXMudHJlZSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4vLyBFeGFtcGxlIG9mIG9wdGlvbnMgb2JqZWN0LlxyXG5vcHRpb25zID0ge1xyXG4gIG5vZGU6IHtcclxuICAgIGNvbG9yOiBcIiNGRkFBNTVcIixcclxuICAgIHJvdW5kZWQ6IDUsXHJcbiAgICBwYWRkaW5nOiA1LFxyXG4gICAgc3Ryb2tlOiB7XHJcbiAgICAgIGNvbG9yOiBcIiMwMDBcIlxyXG4gICAgICBzaXplOiAwXHJcbiAgICB9LFxyXG4gICAgc2VsZWN0ZWQge1xyXG4gICAgICBjb2xvcjogXCIjRkZBQTU1XCIsXHJcbiAgICAgIHN0cm9rZToge1xyXG4gICAgICAgIGNvbG9yOiBcIiMwMDBcIlxyXG4gICAgICAgIHNpemU6IDBcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgcGF0aDoge1xyXG4gICAgY29sb3I6IFwiIzU1QUFGRlwiLFxyXG4gICAgc2l6ZTogMlxyXG4gIH0sXHJcbiAgdGV4dDoge1xyXG4gICAgY29sb3I6IFwiI0ZGRlwiLFxyXG4gICAgZmFtaWx5OiBcIkFyaWFsXCIsXHJcbiAgICBzaXplOiAxOCxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICBjb2xvcjogXCIjMDAwXCIsXHJcbiAgICAgIHNpemU6IDBcclxuICAgIH1cclxuICB9LFxyXG4gIHNoYWRvdzoge1xyXG4gICAgbm9kZToge1xyXG4gICAgICBibHVyOiA4LFxyXG4gICAgICBjb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMjUpXCIsXHJcbiAgICAgIG9mZnNldFg6IDAsXHJcbiAgICAgIG9mZnNldFk6IDRcclxuICAgIH0sXHJcbiAgICBwYXRoOiB7XHJcbiAgICAgIGJsdXI6IDAsXHJcbiAgICAgIGNvbG9yOiBcIiMwMDBcIixcclxuICAgICAgb2Zmc2V0WDogMCxcclxuICAgICAgb2Zmc2V0WTogMFxyXG4gICAgfSxcclxuICAgIHRleHQ6IHtcclxuICAgICAgYmx1cjogMCxcclxuICAgICAgY29sb3I6IFwiIzAwMFwiLFxyXG4gICAgICBvZmZzZXRYOiAwLFxyXG4gICAgICBvZmZzZXRZOiAwXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiovXHJcblxyXG4oPGFueT53aW5kb3cpLlRyZWVzSlMgPSBUcmVlc0pTOyJdfQ=="}