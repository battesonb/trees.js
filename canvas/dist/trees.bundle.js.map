{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Components/Camera.ts","src/Components/Canvas.ts","src/Components/Colliders/AABB.ts","src/Components/Colliders/Collider.ts","src/Components/EventSystem.ts","src/Components/Renderer.ts","src/Components/SpatialHash.ts","src/Models/Node.ts","src/Models/Tree.ts","src/Types/Point2D.ts","src/main.ts"],"names":[],"mappings":"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","file":"trees.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Point2D from \"../Types/Point2D\";\r\n\r\nexport default class Camera {\r\n  position: Point2D;\r\n  _zoom: number;\r\n\r\n  constructor(x: number = 0, y: number = 0, zoom: number = 1) {\r\n    this.position = new Point2D(x, y);\r\n    this.setZoom(zoom);\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    this._zoom = Math.max(0.5, Math.min(50, zoom));\r\n  }\r\n\r\n  getZoom(): number {\r\n    return this._zoom;\r\n  }\r\n\r\n  decZoom(amt: number) {\r\n    this.setZoom(this._zoom - amt);\r\n  }\r\n}","export default class Canvas {\r\n  dom: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n\r\n  _fontSize: number;\r\n  _fontFamily: string;\r\n\r\n  constructor(id: string) {\r\n    this.dom = <HTMLCanvasElement>document.getElementById(id);\r\n    this.context = this.dom.getContext(\"2d\");\r\n\r\n    this.context.textBaseline = \"top\";\r\n\r\n    this._fontSize = 18;\r\n    this._fontFamily = \"Arial\";\r\n    this._updateFont();\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.dom.width;\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.dom.height;\r\n  }\r\n\r\n  clear(): void {\r\n    this.context.clearRect(0, 0, this.dom.width, this.dom.height);\r\n  }\r\n\r\n  getTextWidth(text: string): number {\r\n    return this.context.measureText(text).width;\r\n  }\r\n\r\n  setFill(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.fillStyle = style;\r\n  }\r\n\r\n  setStroke(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.strokeStyle = style;\r\n  }\r\n\r\n  setStrokeSize(size: number = 1): void {\r\n    this.context.lineWidth = size;\r\n  }\r\n\r\n  setFontSize(size: number): void {\r\n    this._fontSize = size;\r\n    this._updateFont();\r\n  }\r\n\r\n  setFontFamily(family: string): void {\r\n    this._fontFamily = family;\r\n    this._updateFont();\r\n  }\r\n\r\n  _updateFont(): void {\r\n    this.context.font = this._fontSize + \"px \" + this._fontFamily;\r\n  }\r\n\r\n  drawRect(x: number, y: number, w: number, h: number, stroke?: boolean, shadow?: boolean): void {\r\n    if(stroke) {\r\n      this.context.strokeRect(x, y, w, h);\r\n    } else {\r\n      this.context.fillRect(x, y, w, h);\r\n    }\r\n  }\r\n  \r\n  drawArc(x: number, y: number, r: number, startAngle: number, endAngle: number, stroke?: boolean): void {\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, r, startAngle, endAngle);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  drawLine(x1: number, y1: number, x2: number, y2: number): void {\r\n    this.context.beginPath();\r\n    this.context.moveTo(x1, y1);\r\n    this.context.lineTo(x2, y2);\r\n    this.context.closePath();\r\n    this.context.stroke();\r\n  }\r\n\r\n  // TODO add line-wrap\r\n  drawText(text: string, x: number, y: number, stroke?: boolean, maxWidth?: number): void {\r\n    if(stroke) {\r\n      this.context.strokeText(text, x, y);\r\n    } else {\r\n      this.context.fillText(text, x, y);\r\n    }\r\n  }\r\n\r\n  drawRoundedRect(x: number, y: number, w: number, h: number, r: number, stroke?: boolean): void {\r\n    if (w < 2 * r) r = w / 2;\r\n    if (h < 2 * r) r = h / 2;\r\n    this.context.beginPath();\r\n    this.context.moveTo(x + r, y);\r\n    this.context.arcTo(x + w, y, x + w, y + h, r);\r\n    this.context.arcTo(x + w, y + h, x, y + h, r);\r\n    this.context.arcTo(x, y + h, x, y, r);\r\n    this.context.arcTo(x, y, x + w, y, r);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  enableShadows(blur: number, offsetX: number = 0, offsetY: number = 0, color: string = \"black\") {\r\n    this.context.shadowBlur = 8;\r\n    this.context.shadowColor = color;\r\n    this.context.shadowOffsetX = offsetX;\r\n    this.context.shadowOffsetY = offsetY;\r\n  }\r\n\r\n  clearShadows() {\r\n    this.context.shadowBlur = 0;\r\n    this.context.shadowOffsetX = 0;\r\n    this.context.shadowOffsetY = 0;\r\n  }\r\n}","import Collider from \"./Collider\";\r\nimport Point2D from \"../../Types/Point2D\";\r\n\r\n/**\r\n * Represents an AABB with top-left alignment.\r\n */\r\nexport default class AABB extends Collider {\r\n  _width: number;\r\n  _height: number;\r\n\r\n  constructor(x: number, y: number, width: number = 0, height: number = 0) {\r\n    super(x, y);\r\n    this._width = width;\r\n    this._height = height;\r\n  }\r\n\r\n  contains(x: number, y: number): boolean {\r\n    return x >= this.position.x && y >= this.position.y && x <= this.position.x + this.width() && y <= this.position.y + this.height();\r\n  }\r\n\r\n  overlaps(other: Collider): boolean {\r\n    if(other instanceof AABB) {\r\n      return Math.abs(this.position.x - other.position.x) * 2 < this.width() + other.width() &&\r\n             Math.abs(this.position.y - other.position.y) * 2 < this.height() + other.height();\r\n    }\r\n    throw Error(\"Unknown collider type, cannot determine overlap.\");\r\n  }\r\n\r\n  topLeft(): Point2D {\r\n    return this.position;\r\n  }\r\n\r\n  height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  width(): number {\r\n    return this._width;\r\n  }\r\n}","import Point2D from \"../../Types/Point2D\";\r\n\r\nexport default abstract class Collider {\r\n  position: Point2D;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.position = new Point2D(x, y);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given point is within the collider.\r\n   * @param x\r\n   * @param y \r\n   */\r\n  abstract contains(x: number, y: number): boolean;\r\n\r\n  /**\r\n   * Returns true if the collider overlaps with the given collider.\r\n   * @param collider \r\n   */\r\n  abstract overlaps(other: Collider): boolean;\r\n\r\n  /**\r\n   * Returns the top-left position of the collider.\r\n   */\r\n  abstract topLeft(): Point2D;\r\n\r\n  abstract height(): number;\r\n  abstract width(): number;\r\n}","import Camera from \"./Camera\";\r\nimport Canvas from \"./Canvas\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport Point2D from \"../Types/Point2D\";\r\nimport Renderer from \"./Renderer\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nlet self: EventSystem;\r\n\r\nexport default class EventSystem {\r\n  _camera: Camera;\r\n  _canvas: Canvas;\r\n  _currentNode: Node;\r\n  _hash: SpatialHash;\r\n  _renderer: Renderer;\r\n  _x: number;\r\n  _y: number;\r\n\r\n  constructor(camera: Camera, renderer: Renderer, canvas: Canvas, tree: Tree) {\r\n    self = this; // Ugly, but binds require handlers.\r\n    this._hash = new SpatialHash(); // TODO deterrmine this using the node sizes!\r\n    this._camera = camera;\r\n    this._canvas = canvas;\r\n    this._currentNode = null;\r\n    this._renderer = renderer;\r\n\r\n    tree.each((node: Node) => {\r\n      this._hash.add(node);\r\n    });\r\n\r\n    this._canvas.dom.addEventListener(\"mousedown\", this.mouseDown);\r\n    this._canvas.dom.addEventListener(\"mousewheel\", this.mouseWheel);\r\n\r\n    this.redraw();\r\n  }\r\n\r\n  _getEventPoint(event: MouseEvent): Point2D {\r\n    return new Point2D(event.offsetX, event.offsetY);\r\n  }\r\n\r\n  mouseDown(event: MouseEvent) {\r\n    let point: Point2D = self._getEventPoint(event);\r\n    self._currentNode = <Node>self._hash.find(point.x / self._camera.getZoom() - self._camera.position.x, point.y / self._camera.getZoom() - self._camera.position.y);\r\n\r\n    self._x = point.x;\r\n    self._y = point.y;\r\n    \r\n    window.addEventListener(\"mousemove\", self.mouseMove);\r\n    window.addEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  mouseWheel(event: MouseWheelEvent) {\r\n    self._camera.decZoom(event.deltaY / 100);\r\n    self.redraw();\r\n  }\r\n\r\n  mouseMove(event: MouseEvent) {\r\n    let point: Point2D = self._getEventPoint(event);\r\n    let dx = (point.x - self._x) / self._camera.getZoom();\r\n    let dy = (point.y - self._y) / self._camera.getZoom();\r\n    if(self._currentNode === null) {\r\n      self._camera.position.x+= dx;\r\n      self._camera.position.y+= dy;\r\n    } else {\r\n      self._hash.move(self._currentNode, dx, dy);\r\n    }\r\n    \r\n    self.redraw();\r\n\r\n    self._x = point.x;\r\n    self._y = point.y;\r\n  }\r\n\r\n  mouseUp(event: MouseEvent) {\r\n    self._currentNode = null;\r\n    window.removeEventListener(\"mousemove\", self.mouseMove);\r\n    window.removeEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  redraw(): void {\r\n    self._renderer.clear();\r\n    self._renderer.drawTree();\r\n    self._renderer.drawHashGroups(self._hash); // Debug\r\n  }\r\n}","import Canvas from \"./Canvas\";\r\nimport Camera from \"./Camera\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nexport default class Renderer {\r\n  _canvas: Canvas;\r\n  _camera: Camera;\r\n  _tree: Tree;\r\n  _options: any;\r\n  \r\n  constructor(camera: Camera, canvas: Canvas, tree: Tree, options: any) {\r\n    this._canvas = canvas;\r\n    this._camera = camera;\r\n    this._tree = tree;\r\n    this._options = options;\r\n\r\n    this._canvas.setFontFamily(options.text.family);\r\n  }\r\n\r\n  clear(): void {\r\n    this._canvas.clear();\r\n  }\r\n\r\n  drawTree(): void {\r\n    this._tree.each((node: Node) => {\r\n      this.drawPaths(node);\r\n    });\r\n\r\n    this._tree.each((node: Node) => {\r\n      this.drawNode(node);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A debugging method for visualising how the spatial hash looks.\r\n   */\r\n  drawHashGroups(hash: SpatialHash): void {\r\n    this._canvas.setStroke(\"#77BBFF\");\r\n    this._canvas.setStrokeSize(0.5);\r\n    this._canvas.clearShadows();\r\n\r\n    let hor = (this._camera.position.x % hash._bucketSize) * this._camera._zoom;\r\n    while(hor < this._canvas.getWidth()) {\r\n      this._canvas.drawLine(hor, 0, hor, this._canvas.getHeight());\r\n      hor += hash._bucketSize * this._camera._zoom;\r\n    }\r\n\r\n    let vert = (this._camera.position.y % hash._bucketSize) * this._camera._zoom;\r\n    while(vert < this._canvas.getHeight()) {\r\n      this._canvas.drawLine(0, vert, this._canvas.getWidth(), vert);\r\n      vert += hash._bucketSize * this._camera._zoom;\r\n    }\r\n  }\r\n\r\n  drawNode(node: Node): void {\r\n    if(this._options.shadow.node.blur > 0) {\r\n      this._canvas.enableShadows(this._options.shadow.node.blur, this._options.shadow.node.offsetX, this._options.shadow.node.offsetY, this._options.shadow.node.color);\r\n    } else {\r\n      this._canvas.clearShadows();\r\n    }\r\n    this._canvas.setStroke(this._options.node.stroke.color);\r\n    this._canvas.setStrokeSize(this._options.node.stroke.size);\r\n    this._canvas.setFill(this._options.node.color);\r\n    this._canvas.drawRoundedRect((node.position.x + this._camera.position.x) * this._camera.getZoom(), (node.position.y + this._camera.position.y) * this._camera.getZoom(), node.width() * this._camera.getZoom(), node.height() * this._camera.getZoom(), this._options.node.rounded * this._camera.getZoom(), false);\r\n  \r\n    if(this._options.shadow.text.blur > 0) {\r\n      this._canvas.enableShadows(this._options.shadow.text.blur, this._options.shadow.text.offsetX, this._options.shadow.text.offsetY, this._options.shadow.text.color);\r\n    } else {\r\n      this._canvas.clearShadows();\r\n    }\r\n    this._canvas.setFontSize(this._options.text.size * this._camera.getZoom());\r\n    this._canvas.setStroke(this._options.text.stroke.color);\r\n    this._canvas.setStrokeSize(this._options.text.stroke.size);\r\n    this._canvas.setFill(this._options.text.color);\r\n    this._canvas.drawText(node.getText(), (node.position.x + this._camera.position.x) * this._camera.getZoom(), (node.position.y + this._camera.position.y) * this._camera.getZoom(), this._options.text.stroke.size > 0, 100 * this._camera.getZoom());\r\n  }\r\n\r\n  drawPaths(node: Node): void {\r\n    if(this._options.shadow.path.blur > 0) {\r\n      this._canvas.enableShadows(this._options.shadow.path.blur, this._options.shadow.path.offsetX, this._options.shadow.path.offsetY, this._options.shadow.path.color);\r\n    } else {\r\n      this._canvas.clearShadows();\r\n    }\r\n    this._canvas.setStroke(this._options.path.color);\r\n    this._canvas.setStrokeSize(this._options.path.size);\r\n    for(let i = 0; i < node._children.length; i++) {\r\n      this._canvas.drawLine((node.position.x + node.width() / 2 + this._camera.position.x) * this._camera.getZoom(), (node.position.y + node.height() / 2 + this._camera.position.y) * this._camera.getZoom(), (node._children[i].position.x + node._children[i].width() / 2 + this._camera.position.x) * this._camera.getZoom(), (node._children[i].position.y + node._children[i].height() / 2 + this._camera.position.y) * this._camera.getZoom());\r\n    }\r\n  }\r\n}","import Collider from './Colliders/Collider';\r\nimport Point2D from '../Types/Point2D';\r\n\r\n/**\r\n * A spatial hash based on AABB world coordinates.\r\n */\r\nexport default class SpatialHash {\r\n  _bucketSize: number;\r\n  _inverseBucketSize: number;\r\n  _map: object;\r\n\r\n  constructor(bucketSize: number = 120) {\r\n    this._map = {};\r\n    this._bucketSize = bucketSize;\r\n    this._inverseBucketSize = 1 / bucketSize;\r\n  }\r\n\r\n  /**\r\n   * Given a collider, return the points within the hash in which the collider lies.\r\n   * @param collider The collider\r\n   */\r\n  getPoints(collider: Collider) : Array<Point2D> {\r\n    let points: Array<Point2D> = [];\r\n    let position: Point2D = collider.topLeft();\r\n    let width: number = collider.width();\r\n    let height: number = collider.height();\r\n\r\n    for(let moveH: number = Math.floor(position.x * this._inverseBucketSize); moveH * this._bucketSize <= position.x + width; moveH+= 1) {\r\n      for(let moveV: number = Math.floor(position.y * this._inverseBucketSize); moveV * this._bucketSize <= position.y + height; moveV+= 1) {\r\n        let x: number = moveH * this._bucketSize;\r\n        let y: number = moveV * this._bucketSize;\r\n        points.push(new Point2D(x, y));  \r\n      }\r\n    }\r\n\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Add a collider to the hash, assuming it is not already within the hash.\r\n   * @param collider\r\n   */\r\n  add(collider: Collider) : void {\r\n    let points: Array<Point2D> = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this._map[hash] === undefined) {\r\n        this._map[hash] = new Set();\r\n      }\r\n      this._map[hash].add(collider);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the given collider from the hash and deletes any empty sets in the process.\r\n   * @param collider\r\n   * @return true if collider is removed, false otherwise.\r\n   */\r\n  remove(collider: Collider) : boolean {\r\n    let removed: boolean = false;\r\n    let points: Array<Point2D>  = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this._map[hash] !== undefined) {\r\n        if(this._map[hash].delete(collider)) {\r\n          removed = true;\r\n          if(this._map[hash].size == 0) {\r\n            delete this._map[hash];\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return an array of all colliders in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  getNearby(x: number, y: number): Array<Collider> {\r\n    let hash = this.toHashLong(x, y);\r\n    let set = this._map[hash];\r\n    if(set) {\r\n      return <Array<Collider>>Array.from(set);\r\n    }    \r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return the first collider containing the world-point in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  find(x: number, y: number): Collider {\r\n    let colliders: Array<Collider> = this.getNearby(x, y);\r\n    for(let i = 0; i < colliders.length; i++) {\r\n      if(colliders[i].contains(x, y)) {\r\n        return colliders[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Given a collider in the hash, move it by x and y points.\r\n   * @param collider\r\n   * @param x \r\n   * @param y \r\n   */\r\n  move(collider: Collider, x: number, y: number) : void {\r\n    this.remove(collider);\r\n    collider.position.x += x;\r\n    collider.position.y += y;\r\n    this.add(collider);\r\n  }\r\n\r\n  /**\r\n   * Convert a point to a unique 32-bit number representing the x/y coordinates in the hash.\r\n   * @param point\r\n   */\r\n  pointToHashLong(x: number, y: number): number {\r\n    x = Math.floor(x * this._inverseBucketSize) & 0xFFFF; // cast to 16-bit\r\n    y = (Math.floor(y * this._inverseBucketSize) & 0xFFFF) << 15; // cast to 16-bit and then shift 15-bits to the left.\r\n    return x | y;\r\n  }  \r\n\r\n  /**\r\n   * Convert a point to a unique 32-bit number representing the x/y coordinates in the hash.\r\n   * @param point\r\n   */\r\n  toHashLong(x: number, y: number): number {\r\n    x = Math.floor(x * this._inverseBucketSize) & 0xFFFF; // cast to 16-bit\r\n    y = (Math.floor(y * this._inverseBucketSize) & 0xFFFF) << 15; // cast to 16-bit and then shift 15-bits to the left.\r\n    return x | y;\r\n  }  \r\n}","import AABB from \"../Components/Colliders/AABB\";\r\n\r\n/**\r\n * The representation of a node of the tree.\r\n */\r\nexport default class Node extends AABB {\r\n  _id: number;\r\n  _children: Array<Node>;\r\n  _text: string;\r\n  parent: Node;\r\n\r\n  constructor(text: string, id: number = -1, x: number = 0, y: number = 0) {\r\n    super(x, y);\r\n    this.setText(text);\r\n    this.setId(id);\r\n    this._children = [];\r\n    this._width = 70; // TEMPORARY, TODO DELETE THIS\r\n    this._height = 24;\r\n  }\r\n\r\n  /**\r\n   * Sets the identifier of the node. Uniqueness of the identifier is not determined.\r\n   * @param id\r\n   */\r\n  setId(id: number): void {\r\n    this._id = id;\r\n  }\r\n\r\n  getId(): number {\r\n    return this._id;\r\n  }\r\n\r\n  setText(text: string): void {\r\n    this._text = text;\r\n  }\r\n\r\n  getText(): string {\r\n    return this._text;\r\n  }\r\n\r\n  /**\r\n   * Adds a child to the current node and sets the parent of the child as the object of the calling the method.\r\n   * @param child \r\n   */\r\n  addChild(child: Node): void {\r\n    this._children.push(child);\r\n    child.parent = this;\r\n  }\r\n\r\n  /**\r\n   * Gets the child with a specific identifier.\r\n   * TODO make faster with a binary search, maybe? Probably not though.\r\n   * @param id\r\n   */\r\n  getChild(id: number): Node {\r\n    for(let i = 0; i < this._children.length; i++) {\r\n      let child = this._children[i];\r\n      if(child.getId() === id) {\r\n        return child;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}","import Node from \"./Node\";\r\nimport Canvas from \"../Components/Canvas\";\r\n\r\nexport default class Tree {\r\n  _root: Node;\r\n\r\n  /**\r\n   * Builds the tree given a nested json object representing the nodes of the tree.\r\n   * Allowed attributes include: text, x, y, children, and id.\r\n   * @param json Representation of the tree.\r\n   * @param canvas Canvas object for measuring width/height and determining text-wrapping of nodes.\r\n   */\r\n  constructor(json: object, canvas: Canvas) {\r\n    this._addNode(json);\r\n  }\r\n\r\n  _addNode(descent: object, node?: Node) {\r\n    if(descent !== undefined) {\r\n      if(descent[\"text\"] !== undefined) {\r\n        let id = descent[\"id\"] !== undefined ? descent[\"id\"] : -1;\r\n        let x = descent[\"x\"] !== undefined ? descent[\"x\"] : 0;\r\n        let y = descent[\"y\"] !== undefined ? descent[\"y\"] : 0;\r\n        let child = new Node(descent[\"text\"], id, x, y);\r\n        if(node === undefined) {\r\n          this._root = child;\r\n          node = this._root;\r\n        } else {\r\n          node.addChild(child);\r\n        }\r\n        if(descent[\"children\"] !== undefined) {\r\n          for(let i = 0; i < descent[\"children\"].length; i++) {\r\n            this._addNode(descent[\"children\"][i], node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  each(callback: (node: Node) => any, node: Node = this._root): void {\r\n    if(node !== undefined && node !== null) {\r\n      for(let i = 0; i < node._children.length; i++) {\r\n        this.each(callback, node._children[i]);\r\n      }\r\n      callback(node);\r\n    }\r\n  }\r\n}","export default class Point2D {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}","import Camera from \"./Components/Camera\";\r\nimport Canvas from \"./Components/Canvas\";\r\nimport EventSystem from \"./Components/EventSystem\";\r\nimport Renderer from \"./Components/Renderer\";\r\nimport Tree from \"./Models/Tree\";\r\n\r\nexport default class TreesJS {\r\n  _camera: Camera;\r\n  _canvas: Canvas;\r\n  _eventSystem: EventSystem;\r\n  _renderer: Renderer;\r\n  _tree: Tree;\r\n\r\n  constructor(id: string, json: object, options?: any) {\r\n    if(options === undefined) {\r\n      options = {};\r\n    }\r\n\r\n    if(options.node === undefined) {\r\n      options.node = {};\r\n    }\r\n    if(options.node.color === undefined) {\r\n      options.node.color = \"#FFAA55\";\r\n    }\r\n    if(options.node.rounded === undefined) {\r\n      options.node.rounded = 4;\r\n    }\r\n    if(options.node.stroke === undefined) {\r\n      options.node.stroke = {};\r\n    }\r\n    if(options.node.stroke.color === undefined) {\r\n      options.node.stroke.color = \"#000\";\r\n    }\r\n    if(options.node.stroke.size === undefined) {\r\n      options.node.stroke.size = 0;\r\n    }\r\n\r\n    if(options.path === undefined) {\r\n      options.path = {};\r\n    }\r\n    if(options.path.color === undefined) {\r\n      options.path.color = \"#55AAFF\";\r\n    }\r\n    if(options.path.size === undefined) {\r\n      options.path.size = 2;\r\n    }\r\n\r\n    if(options.text === undefined) {\r\n      options.text = {};\r\n    }\r\n    if(options.text.color === undefined) {\r\n      options.text.color = \"#FFF\";\r\n    }\r\n    if(options.text.family === undefined) {\r\n      options.text.family = \"Arial\";\r\n    }\r\n    if(options.text.size === undefined) {\r\n      options.text.size = 18;\r\n    }\r\n    if(options.text.stroke === undefined) {\r\n      options.text.stroke = {};\r\n    }\r\n    if(options.text.stroke.color === undefined) {\r\n      options.text.stroke.color = \"#000\";\r\n    }\r\n    if(options.text.stroke.size === undefined) {\r\n      options.text.stroke.size = 0;\r\n    }\r\n\r\n    if(options.shadow === undefined) {\r\n      options.shadow = {};\r\n    }\r\n    if(options.shadow.node === undefined) {\r\n      options.shadow.node = {};\r\n    }\r\n    if(options.shadow.node.blur === undefined) {\r\n      options.shadow.node.blur = 8;\r\n    }\r\n    if(options.shadow.node.color === undefined) {\r\n      options.shadow.node.color = \"rgba(0, 0, 0, 0.25)\";\r\n    }\r\n    if(options.shadow.node.offsetX === undefined) {\r\n      options.shadow.node.offsetX = 0;\r\n    }\r\n    if(options.shadow.node.offsetY === undefined) {\r\n      options.shadow.node.offsetY = 4;\r\n    }\r\n    if(options.shadow.path === undefined) {\r\n      options.shadow.path = {};\r\n    }\r\n    if(options.shadow.path.blur === undefined) {\r\n      options.shadow.path.blur = 0;\r\n    }\r\n    if(options.shadow.path.color === undefined) {\r\n      options.shadow.path.color = \"#000\";\r\n    }\r\n    if(options.shadow.path.offsetX === undefined) {\r\n      options.shadow.path.offsetX = 0;\r\n    }\r\n    if(options.shadow.path.offsetY === undefined) {\r\n      options.shadow.path.offsetY = 0;\r\n    }\r\n    if(options.shadow.text === undefined) {\r\n      options.shadow.text = {};\r\n    }\r\n    if(options.shadow.text.blur === undefined) {\r\n      options.shadow.text.blur = 1;\r\n    }\r\n    if(options.shadow.text.color === undefined) {\r\n      options.shadow.text.color = \"rgba(0, 0, 0, 0.3)\";\r\n    }\r\n    if(options.shadow.text.offsetX === undefined) {\r\n      options.shadow.text.offsetX = 0;\r\n    }\r\n    if(options.shadow.text.offsetY === undefined) {\r\n      options.shadow.text.offsetY = 0;\r\n    }\r\n\r\n    this._camera = new Camera(0, 0, 1);\r\n    this._canvas = new Canvas(id);\r\n    this._tree = new Tree(json, this._canvas);\r\n    this._renderer = new Renderer(this._camera, this._canvas, this._tree, options);\r\n    this._eventSystem = new EventSystem(this._camera, this._renderer, this._canvas, this._tree);\r\n  }\r\n}\r\n\r\n/*\r\n// Example of options object.\r\noptions = {\r\n  node: {\r\n    color: \"#FFAA55\",\r\n    rounded: 5,\r\n    stroke: {\r\n      color: \"#000\"\r\n      size: 0\r\n    }\r\n  },\r\n  path: {\r\n    color: \"#55AAFF\",\r\n    size: 2\r\n  },\r\n  text: {\r\n    color: \"#FFF\",\r\n    family: \"Arial\",\r\n    size: 18,\r\n    stroke: {\r\n      color: \"#000\",\r\n      size: 0\r\n    }\r\n  },\r\n  shadow: {\r\n    node: {\r\n      blur: 8,\r\n      color: \"rgba(0, 0, 0, 0.25)\",\r\n      offsetX: 0,\r\n      offsetY: 4\r\n    },\r\n    path: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    },\r\n    text: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n(<any>window).TreesJS = TreesJS;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}