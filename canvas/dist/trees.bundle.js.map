{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Components/Camera.ts","src/Components/Colliders/AABB.ts","src/Components/Colliders/Collider.ts","src/Components/EventSystem.ts","src/Components/Renderer/CanvasRenderer.ts","src/Components/SpatialHash.ts","src/Components/Stage/CanvasStage.ts","src/Models/Node.ts","src/Models/Tree.ts","src/Types/Point2D.ts","src/main.ts"],"names":[],"mappings":"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","file":"trees.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Point2D from \"../Types/Point2D\";\r\n\r\nexport default class Camera {\r\n  private origin: Point2D;\r\n  private position: Point2D;\r\n  private zoom: number;\r\n\r\n  constructor(x: number = 0, y: number = 0, originX: number = 0, originY: number = 0, zoom: number = 1) {\r\n    this.position = new Point2D(x, y);\r\n    this.origin = new Point2D(originX, originY);\r\n    this.setZoom(zoom);\r\n  }\r\n\r\n  setPosition(x, y): void {\r\n    this.position.x = x;\r\n    this.position.y = y;\r\n  }\r\n\r\n  move(x, y): void {\r\n    this.position.x += x;\r\n    this.position.y += y;\r\n  }\r\n\r\n  getPosition(): Point2D {\r\n    return new Point2D(this.position.x + this.origin.x, this.position.y + this.origin.y);\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    this.zoom = Math.max(0.35, Math.min(50, zoom));\r\n  }\r\n\r\n  getZoom(): number {\r\n    return this.zoom;\r\n  }\r\n\r\n  decZoom(amt: number, x: number, y: number) {\r\n    let newZoom: number = this.zoom - amt;\r\n    this.setZoom(newZoom);\r\n  }\r\n}","import Collider from \"./Collider\";\r\nimport Point2D from \"../../Types/Point2D\";\r\n\r\n/**\r\n * Represents an AABB with top-left alignment.\r\n */\r\nexport default class AABB extends Collider {\r\n  private width: number;\r\n  private height: number;\r\n\r\n  constructor(x: number, y: number, width: number = 0, height: number = 0) {\r\n    super(x, y);\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  contains(x: number, y: number): boolean {\r\n    return x >= this.position.x && y >= this.position.y && x <= this.position.x + this.getWidth() && y <= this.position.y + this.getHeight();\r\n  }\r\n\r\n  overlaps(other: Collider): boolean {\r\n    if(other instanceof AABB) {\r\n      let deltaX = Math.abs(this.position.x - other.position.x);\r\n      let deltaY = Math.abs(this.position.y - other.position.y);\r\n      return (deltaX <= this.width || deltaX <= other.width) && (deltaY <= this.height || deltaY <= other.height);\r\n    } else {\r\n      throw Error(\"Unknown collider type, cannot determine overlap.\");\r\n    }\r\n  }\r\n\r\n  topLeft(): Point2D {\r\n    return this.position;\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.height;\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.width;\r\n  }\r\n\r\n  setHeight(height: number): void {\r\n    this.height = height;\r\n  }\r\n\r\n  setWidth(width: number): void {\r\n    this.width = width;\r\n  }\r\n}","import Point2D from \"../../Types/Point2D\";\r\n\r\nexport default abstract class Collider {\r\n  position: Point2D;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.position = new Point2D(x, y);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given point is within the collider.\r\n   * @param x\r\n   * @param y \r\n   */\r\n  abstract contains(x: number, y: number): boolean;\r\n\r\n  /**\r\n   * Returns true if the collider overlaps with the given collider.\r\n   * @param collider \r\n   */\r\n  abstract overlaps(other: Collider): boolean;\r\n\r\n  /**\r\n   * Returns the top-left position of the collider.\r\n   */\r\n  abstract topLeft(): Point2D;\r\n\r\n  abstract getHeight(): number;\r\n  abstract getWidth(): number;\r\n}","import Camera from \"./Camera\";\r\nimport CanvasStage from \"./Stage/CanvasStage\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport Point2D from \"../Types/Point2D\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nimport { IRenderer } from \"./Renderer/IRenderer\";\r\nimport { IStage } from \"./Stage/IStage\";\r\n\r\nlet self: EventSystem;\r\n\r\nexport default class EventSystem {\r\n  private camera: Camera;\r\n  private stage: IStage;\r\n  private currentNode: Node;\r\n  private hash: SpatialHash;\r\n  private renderer: IRenderer;\r\n  private x: number;\r\n  private y: number;\r\n\r\n  private moved: boolean;\r\n\r\n  constructor(camera: Camera, renderer: IRenderer, stage: IStage, tree: Tree) {\r\n    self = this; // Ugly, but binds require handlers.\r\n    this.hash = new SpatialHash(); // TODO deterrmine this using the node sizes!\r\n    this.camera = camera;\r\n    this.stage = stage;\r\n    this.currentNode = null;\r\n    this.renderer = renderer;\r\n    this.moved = false;\r\n\r\n    tree.each((node: Node) => {\r\n      this.hash.add(node);\r\n    });\r\n\r\n    this.stage.dom.addEventListener(\"mousedown\", this.mouseDown);\r\n    this.stage.dom.addEventListener(\"mousemove\", this.mouseMove);\r\n    this.stage.dom.addEventListener(\"mousewheel\", this.mouseWheel);\r\n\r\n    this.redraw();\r\n  }\r\n\r\n  private getEventPoint(event: MouseEvent): Point2D {\r\n    return new Point2D(event.offsetX, event.offsetY);\r\n  }\r\n\r\n  mouseDown(event: MouseEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    let cameraPosition = self.camera.getPosition();\r\n    self.currentNode = <Node>self.hash.find(point.x / self.camera.getZoom() - cameraPosition.x, point.y / self.camera.getZoom() - cameraPosition.y);\r\n    if(self.currentNode) {\r\n      self.currentNode.bringToFront();\r\n    }\r\n    self.moved = false;\r\n\r\n    self.x = point.x;\r\n    self.y = point.y;\r\n    \r\n    window.addEventListener(\"mousemove\", self.mouseDrag);\r\n    window.addEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  mouseWheel(event: MouseWheelEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    self.camera.decZoom(event.deltaY / 250, point.x, point.y);\r\n    self.redraw();\r\n  }\r\n\r\n  mouseDrag(event: MouseEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    let dx = (point.x - self.x) / self.camera.getZoom();\r\n    let dy = (point.y - self.y) / self.camera.getZoom();\r\n    if(self.currentNode === null) {\r\n      self.camera.move(dx, dy);\r\n    } else {\r\n      self.hash.move(self.currentNode, dx, dy);\r\n    }\r\n    self.moved = true;\r\n\r\n    self.redraw();\r\n    self.x = point.x;\r\n    self.y = point.y;\r\n  }\r\n  \r\n  mouseMove(event: MouseEvent) {\r\n    let point: Point2D = self.getEventPoint(event);\r\n    let cameraPosition = self.camera.getPosition();\r\n    let hoverNode: Node = <Node>self.hash.find(point.x / self.camera.getZoom() - cameraPosition.x, point.y / self.camera.getZoom() - cameraPosition.y);\r\n    if(hoverNode) {\r\n      self.stage.dom.style.cursor = \"pointer\";\r\n    } else {\r\n      self.stage.dom.style.cursor = \"auto\";\r\n    }\r\n  }\r\n\r\n  mouseUp(event: MouseEvent) {\r\n    if(!self.moved) {\r\n      self.renderer.setSelectedNode(self.currentNode);\r\n      self.redraw();\r\n    }\r\n    self.currentNode = null;\r\n    window.removeEventListener(\"mousemove\", self.mouseDrag);\r\n    window.removeEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  redraw(): void {\r\n    self.renderer.clear();\r\n    self.renderer.drawTree();\r\n    self.renderer.drawHashGroups(self.hash); // Debug Spatial Hash\r\n  }\r\n}","import CanvasStage from \"../Stage/CanvasStage\";\r\nimport Camera from \"../Camera\";\r\nimport Node from \"../../Models/Node\";\r\nimport Point2D from \"../../Types/Point2D\";\r\nimport Tree from \"../../Models/Tree\";\r\nimport SpatialHash from \"../SpatialHash\";\r\n\r\nimport { IRenderer } from \"./IRenderer\";\r\n\r\nexport default class CanvasRenderer implements IRenderer {\r\n  private canvas: CanvasStage;\r\n  private camera: Camera;\r\n  private tree: Tree;\r\n  private options: any;\r\n\r\n  private selectedNode: Node;\r\n  \r\n  constructor(camera: Camera, canvas: CanvasStage, tree: Tree, options: any) {\r\n    this.canvas = canvas;\r\n    this.camera = camera;\r\n    this.tree = tree;\r\n    this.options = options;\r\n\r\n    this.canvas.setFontFamily(options.text.family);\r\n\r\n    this.setTreeMeasurements(tree, options);\r\n    let max: Point2D = this.setNodePositions(tree, options);\r\n\r\n    camera.move(-max.x/2, -max.y/2);\r\n  }\r\n\r\n  private setTreeMeasurements(tree: Tree, options: any): void {\r\n    this.tree.each((node: Node) => {\r\n      node.setWidth(this.canvas.getTextWidth(node.getText()) + this.options.node.padding * 3);\r\n      node.setHeight(this.options.text.size + this.options.node.padding * 2);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the positions of nodes and returns the furthest x and y positions.\r\n   * @param tree\r\n   * @param options \r\n   */\r\n  private setNodePositions(tree: Tree, options: any): Point2D {\r\n    let max = new Point2D();\r\n    let currentPos = new Point2D(0, 0);\r\n    let deltaX = 0;\r\n    let currentLevel = 0;\r\n    this.tree.each((node: Node, level: number) => {\r\n      if(level != currentLevel) {\r\n        currentPos.x += deltaX + this.options.node.margin;\r\n        currentPos.y = 0;\r\n        currentLevel = level;\r\n      }\r\n      deltaX = Math.max(deltaX, node.getWidth() + node.position.x);   \r\n      node.position.x = currentPos.x;\r\n      node.position.y = currentPos.y;\r\n      currentPos.y += node.getHeight() + this.options.node.margin;\r\n      max.x = Math.max(max.x, currentPos.x + node.getWidth());\r\n      max.y = Math.max(max.y, currentPos.y);\r\n    }, true);\r\n    return max;\r\n  }\r\n\r\n  clear(): void {\r\n    this.canvas.clear();\r\n  }\r\n\r\n  drawTree(): void {\r\n    this.tree.each((node: Node) => {\r\n      this.drawPaths(node);\r\n    });\r\n\r\n    this.tree.each((node: Node) => {\r\n      if(node === this.selectedNode) {\r\n        this.drawNode(node, true);\r\n      } else {\r\n        this.drawNode(node);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A debugging method for visualising how the spatial hash looks.\r\n   */\r\n  drawHashGroups(hash: SpatialHash): void {\r\n    this.canvas.setStroke(\"#77BBFF\");\r\n    this.canvas.setStrokeSize(0.25);\r\n    this.canvas.clearShadows();\r\n\r\n    let cameraPosition = this.camera.getPosition();\r\n\r\n    let hor = (cameraPosition.x % hash.getBucketSize()) * this.camera.getZoom();\r\n    while(hor < this.canvas.getWidth()) {\r\n      this.canvas.drawLine(hor, 0, hor, this.canvas.getHeight());\r\n      hor += hash.getBucketSize() * this.camera.getZoom();\r\n    }\r\n\r\n    let vert = (cameraPosition.y % hash.getBucketSize()) * this.camera.getZoom();\r\n    while(vert < this.canvas.getHeight()) {\r\n      this.canvas.drawLine(0, vert, this.canvas.getWidth(), vert);\r\n      vert += hash.getBucketSize() * this.camera.getZoom();\r\n    }\r\n  }\r\n\r\n  drawNode(node: Node, selected?: boolean): void {\r\n    if(this.options.shadow.node.blur > 0) {\r\n      this.canvas.enableShadows(this.options.shadow.node.blur, this.options.shadow.node.offsetX * this.camera.getZoom(), this.options.shadow.node.offsetY * this.camera.getZoom(), this.options.shadow.node.color);\r\n    } else {\r\n      this.canvas.clearShadows();\r\n    }\r\n    if(selected) {\r\n      this.canvas.setStroke(this.options.node.selected.stroke.color);\r\n      this.canvas.setStrokeSize(this.options.node.selected.stroke.size);\r\n      this.canvas.setFill(this.options.node.selected.color);\r\n    } else {\r\n      this.canvas.setStroke(this.options.node.stroke.color);\r\n      this.canvas.setStrokeSize(this.options.node.stroke.size);\r\n      this.canvas.setFill(this.options.node.color);\r\n    }\r\n    let cameraPosition = this.camera.getPosition();\r\n    this.canvas.drawRoundedRect((node.position.x + cameraPosition.x) * this.camera.getZoom(), (node.position.y + cameraPosition.y) * this.camera.getZoom(), node.getWidth() * this.camera.getZoom(), node.getHeight() * this.camera.getZoom(), this.options.node.rounded * this.camera.getZoom(), false);\r\n  \r\n    if(this.options.shadow.text.blur > 0) {\r\n      this.canvas.enableShadows(this.options.shadow.text.blur, this.options.shadow.text.offsetX * this.camera.getZoom(), this.options.shadow.text.offsetY * this.camera.getZoom(), this.options.shadow.text.color);\r\n    } else {\r\n      this.canvas.clearShadows();\r\n    }\r\n    this.canvas.setFontSize(this.options.text.size * this.camera.getZoom());\r\n    this.canvas.setStroke(this.options.text.stroke.color);\r\n    this.canvas.setStrokeSize(this.options.text.stroke.size);\r\n    this.canvas.setFill(this.options.text.color);\r\n    this.canvas.drawText(node.getText(), (node.position.x + cameraPosition.x + this.options.node.padding) * this.camera.getZoom(), (node.position.y + cameraPosition.y + this.options.node.padding) * this.camera.getZoom(), this.options.text.stroke.size > 0, 100 * this.camera.getZoom());\r\n  }\r\n\r\n  drawPaths(node: Node): void {\r\n    if(this.options.shadow.path.blur > 0) {\r\n      this.canvas.enableShadows(this.options.shadow.path.blur, this.options.shadow.path.offsetX * this.camera.getZoom(), this.options.shadow.path.offsetY * this.camera.getZoom(), this.options.shadow.path.color);\r\n    } else {\r\n      this.canvas.clearShadows();\r\n    }\r\n    this.canvas.setStroke(this.options.path.color);\r\n    this.canvas.setStrokeSize(this.options.path.size);\r\n    let cameraPosition = this.camera.getPosition();\r\n    for(let i = 0; i < node.childCount(); i++) {\r\n      let child: Node = node.getChildAt(i);\r\n      this.canvas.drawLine((node.position.x + node.getWidth() / 2 + cameraPosition.x) * this.camera.getZoom(), (node.position.y + node.getHeight() / 2 + cameraPosition.y) * this.camera.getZoom(), (child.position.x + child.getWidth() / 2 + cameraPosition.x) * this.camera.getZoom(), (child.position.y + child.getHeight() / 2 + cameraPosition.y) * this.camera.getZoom());\r\n    }\r\n  }\r\n\r\n  setSelectedNode(node: Node): void {\r\n    this.selectedNode = node;\r\n  }\r\n}","import Collider from './Colliders/Collider';\r\nimport Point2D from '../Types/Point2D';\r\n\r\n/**\r\n * A spatial hash based on AABB world coordinates.\r\n */\r\nexport default class SpatialHash {\r\n  private bucketSize: number;\r\n  private inverseBucketSize: number;\r\n  private map: { [hash: number] : Set<Collider> };\r\n\r\n  constructor(bucketSize: number = 100) {\r\n    this.map = {};\r\n    this.bucketSize = bucketSize;\r\n    this.inverseBucketSize = 1 / bucketSize;\r\n  }\r\n\r\n  getBucketSize(): number {\r\n    return this.bucketSize;\r\n  }\r\n\r\n  clear(): void {\r\n    this.map = {};\r\n  }\r\n\r\n  /**\r\n   * Given a collider, return the points within the hash in which the collider lies.\r\n   * @param collider The collider\r\n   */\r\n  getPoints(collider: Collider): Point2D[] {\r\n    let points: Point2D[] = [];\r\n    let position: Point2D = collider.topLeft();\r\n    let width: number = collider.getWidth();\r\n    let height: number = collider.getHeight();\r\n\r\n    for(let moveH: number = Math.floor(position.x * this.inverseBucketSize); moveH * this.bucketSize <= position.x + width; moveH+= 1) {\r\n      for(let moveV: number = Math.floor(position.y * this.inverseBucketSize); moveV * this.bucketSize <= position.y + height; moveV+= 1) {\r\n        let x: number = moveH * this.bucketSize;\r\n        let y: number = moveV * this.bucketSize;\r\n        points.push(new Point2D(x, y));  \r\n      }\r\n    }\r\n\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Add a collider to the hash, assuming it is not already within the hash.\r\n   * @param collider\r\n   */\r\n  add(collider: Collider): void {\r\n    let points: Point2D[] = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this.map[hash] === undefined) {\r\n        this.map[hash] = new Set();\r\n      }\r\n      this.map[hash].add(collider);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the given collider from the hash and deletes any empty sets in the process.\r\n   * @param collider\r\n   * @return true if collider is removed, false otherwise.\r\n   */\r\n  remove(collider: Collider): boolean {\r\n    let removed: boolean = false;\r\n    let points: Point2D[]  = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this.map[hash] !== undefined) {\r\n        if(this.map[hash].delete(collider)) {\r\n          removed = true;\r\n          if(this.map[hash].size == 0) {\r\n            delete this.map[hash];\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return an array of all colliders in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  getNearby(x: number, y: number): Collider[] {\r\n    let hash = this.toHashLong(x, y);\r\n    let set = this.map[hash];\r\n    if(set) {\r\n      return <Collider[]>Array.from(set);\r\n    }    \r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return the first collider containing the world-point in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  find(x: number, y: number): Collider {\r\n    let colliders: Collider[] = this.getNearby(x, y);\r\n    for(let i = 0; i < colliders.length; i++) {\r\n      if(colliders[i].contains(x, y)) {\r\n        return colliders[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Given a collider in the hash, move it by x and y points.\r\n   * @param collider\r\n   * @param x \r\n   * @param y \r\n   */\r\n  move(collider: Collider, x: number, y: number) : void {\r\n    this.remove(collider);\r\n    collider.position.x += x;\r\n    collider.position.y += y;\r\n    this.add(collider);\r\n  }\r\n  \r\n  /**\r\n   * Convert a point to a unique 32-bit number representing the x/y coordinates in the hash.\r\n   * TODO convert this to support more numbers by making the map of type:\r\n   *   private map: { [x: number]: { [y: number] : Set<Collider> } };\r\n   *   (also removes the need for a point-hashing function)\r\n   * @param point\r\n   */\r\n  toHashLong(x: number, y: number): number {\r\n    x = Math.floor(x * this.inverseBucketSize) & 0xFFFF; // cast to 16-bit\r\n    y = (Math.floor(y * this.inverseBucketSize) & 0xFFFF) << 15; // cast to 16-bit and then shift 15-bits to the left.\r\n    return x | y;\r\n  }  \r\n}","import { IStage } from \"./IStage\";\r\n\r\nexport default class CanvasStage implements IStage {\r\n  dom: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n\r\n  private fontSize: number;\r\n  private fontFamily: string;\r\n\r\n  constructor(id: string) {\r\n    this.dom = <HTMLCanvasElement>document.getElementById(id);\r\n    this.context = this.dom.getContext(\"2d\");\r\n\r\n    this.context.textBaseline = \"top\";\r\n\r\n    this.fontSize = 18;\r\n    this.fontFamily = \"Arial\";\r\n    this.updateFont();\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.dom.width;\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.dom.height;\r\n  }\r\n\r\n  clear(): void {\r\n    this.context.clearRect(0, 0, this.dom.width, this.dom.height);\r\n  }\r\n\r\n  getTextWidth(text: string): number {\r\n    return this.context.measureText(text).width;\r\n  }\r\n\r\n  setFill(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.fillStyle = style;\r\n  }\r\n\r\n  setStroke(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.strokeStyle = style;\r\n  }\r\n\r\n  setStrokeSize(size: number = 1): void {\r\n    this.context.lineWidth = size;\r\n  }\r\n\r\n  setFontSize(size: number): void {\r\n    this.fontSize = size;\r\n    this.updateFont();\r\n  }\r\n\r\n  setFontFamily(family: string): void {\r\n    this.fontFamily = family;\r\n    this.updateFont();\r\n  }\r\n\r\n  private updateFont(): void {\r\n    this.context.font = this.fontSize + \"px \" + this.fontFamily;\r\n  }\r\n\r\n  drawRect(x: number, y: number, w: number, h: number, stroke?: boolean, shadow?: boolean): void {\r\n    if(stroke) {\r\n      this.context.strokeRect(x, y, w, h);\r\n    } else {\r\n      this.context.fillRect(x, y, w, h);\r\n    }\r\n  }\r\n  \r\n  drawArc(x: number, y: number, r: number, startAngle: number, endAngle: number, stroke?: boolean): void {\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, r, startAngle, endAngle);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  drawLine(x1: number, y1: number, x2: number, y2: number): void {\r\n    this.context.beginPath();\r\n    this.context.moveTo(x1, y1);\r\n    this.context.lineTo(x2, y2);\r\n    this.context.closePath();\r\n    this.context.stroke();\r\n  }\r\n\r\n  // TODO add line-wrap\r\n  drawText(text: string, x: number, y: number, stroke?: boolean, maxWidth?: number): void {\r\n    if(stroke) {\r\n      this.context.strokeText(text, x, y);\r\n    } else {\r\n      this.context.fillText(text, x, y);\r\n    }\r\n  }\r\n\r\n  drawRoundedRect(x: number, y: number, w: number, h: number, r: number, stroke?: boolean): void {\r\n    if (w < 2 * r) r = w / 2;\r\n    if (h < 2 * r) r = h / 2;\r\n    this.context.beginPath();\r\n    this.context.moveTo(x + r, y);\r\n    this.context.arcTo(x + w, y, x + w, y + h, r);\r\n    this.context.arcTo(x + w, y + h, x, y + h, r);\r\n    this.context.arcTo(x, y + h, x, y, r);\r\n    this.context.arcTo(x, y, x + w, y, r);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  enableShadows(blur: number, offsetX: number = 0, offsetY: number = 0, color: string = \"black\"): void {\r\n    this.context.shadowBlur = 8;\r\n    this.context.shadowColor = color;\r\n    this.context.shadowOffsetX = offsetX;\r\n    this.context.shadowOffsetY = offsetY;\r\n  }\r\n\r\n  clearShadows(): void {\r\n    this.context.shadowBlur = 0;\r\n    this.context.shadowOffsetX = 0;\r\n    this.context.shadowOffsetY = 0;\r\n  }\r\n}","import AABB from \"../Components/Colliders/AABB\";\r\n\r\n/**\r\n * The representation of a node of the tree.\r\n */\r\nexport default class Node extends AABB {\r\n  private id: number;\r\n  private children: Node[];\r\n  private text: string;\r\n  parent: Node;\r\n\r\n  constructor(text: string, id: number = -1, x: number = 0, y: number = 0) {\r\n    super(x, y);\r\n    this.setText(text);\r\n    this.setId(id);\r\n    this.children = [];\r\n    this.setWidth(70); // TEMPORARY, TODO DELETE THIS\r\n    this.setHeight(24);\r\n  }\r\n\r\n  /**\r\n   * Sets the identifier of the node. Uniqueness of the identifier is not determined.\r\n   * @param id\r\n   */\r\n  setId(id: number): void {\r\n    this.id = id;\r\n  }\r\n\r\n  getId(): number {\r\n    return this.id;\r\n  }\r\n\r\n  setText(text: string): void {\r\n    this.text = text;\r\n  }\r\n\r\n  getText(): string {\r\n    return this.text;\r\n  }\r\n\r\n  /**\r\n   * Adds a child to the current node and sets the parent of the child as the object of the calling the method.\r\n   * @param child \r\n   */\r\n  addChild(child: Node): void {\r\n    this.children.push(child);\r\n    child.parent = this;\r\n  }\r\n\r\n  /**\r\n   * Gets the child with a specific identifier.\r\n   * TODO make faster with a binary search, maybe? Probably not though.\r\n   * - Unlikely if we reorder children with bringToFront.\r\n   * - Search time is O(n) and nodes aren't expected to have considerably many children.\r\n   *    - If this becomes the case, remove bringToFront and implement binary search.\r\n   * @param id\r\n   */\r\n  getChild(id: number): Node {\r\n    for(let i = 0; i < this.children.length; i++) {\r\n      let child = this.children[i];\r\n      if(child.getId() === id) {\r\n        return child;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Gets a child by its index.\r\n   * @param index\r\n   */\r\n  getChildAt(index: number): Node {\r\n    return this.children[index];\r\n  }\r\n\r\n  /**\r\n   * Returns the number of children this node has.\r\n   */\r\n  childCount(): number {\r\n    return this.children.length;\r\n  }\r\n\r\n  /**\r\n   * Performs a callback function on each child node of this node.\r\n   * @param callback\r\n   */\r\n  foreachChild(callback: (node: Node, index?: number) => any): void {\r\n    for(let i = 0; i < this.children.length; i++) {\r\n      callback(this.getChildAt(i), i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Brings this node to the front of the parent's children.\r\n   */\r\n  bringToFront(): void {\r\n    let parent: Node = this.parent;\r\n    if(parent) {\r\n      for(let i = 0; i < parent.children.length; i++) {\r\n        if(parent.children[i] === this) {\r\n          parent.children.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n      parent.children.push(this);\r\n    }\r\n  }\r\n}","import Node from \"./Node\";\r\n\r\nimport { IStage } from \"../Components/Stage/IStage\";\r\n\r\nexport default class Tree {\r\n  private root: Node;\r\n\r\n  /**\r\n   * Builds the tree given a nested json object representing the nodes of the tree.\r\n   * Allowed attributes include: text, x, y, children, and id.\r\n   * @param json Representation of the tree.\r\n   * @param stage Stage object for measuring width/height and determining text-wrapping of nodes.\r\n   */\r\n  constructor(json: object, stage: IStage) {\r\n    this.addNode(json);\r\n  }\r\n\r\n  private addNode(descent: object, node?: Node) {\r\n    if(descent !== undefined && descent !== null) {\r\n      if(descent[\"text\"] !== undefined) {\r\n        let id = descent[\"id\"] !== undefined ? descent[\"id\"] : -1;\r\n        let x = descent[\"x\"] !== undefined ? descent[\"x\"] : 0;\r\n        let y = descent[\"y\"] !== undefined ? descent[\"y\"] : 0;\r\n        let child = new Node(descent[\"text\"], id, x, y);\r\n        if(node === undefined || node === null) {\r\n          this.root = child;\r\n          node = this.root;\r\n        } else {\r\n          node.addChild(child);\r\n        }\r\n        if(descent[\"children\"] !== undefined) {\r\n          for(let i = 0; i < descent[\"children\"].length; i++) {\r\n            this.addNode(descent[\"children\"][i], child);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a callback on each node of this tree. Default behaviour is a depth-first on\r\n   * the root node.\r\n   * TODO add breadth-first descent.\r\n   * @param callback\r\n   * @param breadthFirst Defaults to false.\r\n   * @param node The node to start the descent from.\r\n   * @param level Start counting levels from this parameter's value.\r\n   * @param index Index of node\r\n   */\r\n  each(callback: (node: Node, level: number, index: number) => any, breadthFirst?: boolean, node: Node = this.root, level: number = 0, index: number = 0): void {\r\n    if(node !== undefined && node !== null) {\r\n      if(!breadthFirst) {\r\n        callback(node, level, index);\r\n        for(let i = 0; i < node.childCount(); i++) {\r\n          this.each(callback, breadthFirst, node.getChildAt(i), level + 1, i);\r\n        }\r\n      } else {\r\n        let list: Node[] = [];\r\n        let nextList: Node[] = [];\r\n\r\n        list.push(node);\r\n        while(list.length > 0) {\r\n          let currNode: Node = list.splice(0, 1)[0];\r\n          currNode.foreachChild((node: Node, index: number) => {\r\n            nextList.push(node);\r\n          });\r\n          callback(currNode, level, index);\r\n          index++;\r\n          if(list.length === 0) {\r\n            list = nextList;\r\n            nextList = [];\r\n            level++;\r\n            index = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of nodes within this tree.\r\n   */\r\n  children(): number {\r\n    let count = 0;\r\n    this.each((node: Node) => {\r\n      count++;\r\n    });\r\n    return count;\r\n  }\r\n}","export default class Point2D {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}","import Camera from \"./Components/Camera\";\r\nimport CanvasStage from \"./Components/Stage/CanvasStage\";\r\nimport EventSystem from \"./Components/EventSystem\";\r\nimport CanvasRenderer from \"./Components/Renderer/CanvasRenderer\";\r\nimport Tree from \"./Models/Tree\";\r\n\r\nimport { IRenderer } from \"./Components/Renderer/IRenderer\";\r\nimport { IStage } from \"./Components/Stage/IStage\";\r\n\r\nexport default class TreesJS {\r\n  private camera: Camera;\r\n  private stage: IStage;\r\n  private eventSystem: EventSystem;\r\n  private renderer: IRenderer;\r\n  private tree: Tree;\r\n\r\n  constructor(id: string, json: object, options?: any) {\r\n    if(options === undefined) {\r\n      options = {};\r\n    }\r\n\r\n    if(options.node === undefined) {\r\n      options.node = {};\r\n    }\r\n    if(options.node.color === undefined) {\r\n      options.node.color = \"#55AAFF\";\r\n    }\r\n    if(options.node.rounded === undefined) {\r\n      options.node.rounded = 4;\r\n    }\r\n    if(options.node.padding === undefined) {\r\n      options.node.padding = 4;\r\n    }\r\n    if(options.node.margin === undefined) {\r\n      options.node.margin = 32;\r\n    }\r\n    if(options.node.stroke === undefined) {\r\n      options.node.stroke = {};\r\n    }\r\n    if(options.node.stroke.color === undefined) {\r\n      options.node.stroke.color = \"#000\";\r\n    }\r\n    if(options.node.stroke.size === undefined) {\r\n      options.node.stroke.size = 0;\r\n    }\r\n    if(options.node.selected === undefined) {\r\n      options.node.selected = {};\r\n    }\r\n    if(options.node.selected.color === undefined) {\r\n      options.node.selected.color = \"#FFAA55\";\r\n    }\r\n    if(options.node.selected.stroke === undefined) {\r\n      options.node.selected.stroke = {};\r\n    }\r\n    if(options.node.selected.stroke.color === undefined) {\r\n      options.node.selected.stroke.color = \"#000\";\r\n    }\r\n    if(options.node.selected.stroke.size === undefined) {\r\n      options.node.selected.stroke.size = 1;\r\n    }\r\n\r\n    if(options.path === undefined) {\r\n      options.path = {};\r\n    }\r\n    if(options.path.color === undefined) {\r\n      options.path.color = \"#55AAFF\";\r\n    }\r\n    if(options.path.size === undefined) {\r\n      options.path.size = 2;\r\n    }\r\n\r\n    if(options.text === undefined) {\r\n      options.text = {};\r\n    }\r\n    if(options.text.color === undefined) {\r\n      options.text.color = \"#FFF\";\r\n    }\r\n    if(options.text.family === undefined) {\r\n      options.text.family = \"Arial\";\r\n    }\r\n    if(options.text.size === undefined) {\r\n      options.text.size = 18;\r\n    }\r\n    if(options.text.stroke === undefined) {\r\n      options.text.stroke = {};\r\n    }\r\n    if(options.text.stroke.color === undefined) {\r\n      options.text.stroke.color = \"#000\";\r\n    }\r\n    if(options.text.stroke.size === undefined) {\r\n      options.text.stroke.size = 0;\r\n    }\r\n\r\n    if(options.shadow === undefined) {\r\n      options.shadow = {};\r\n    }\r\n    if(options.shadow.node === undefined) {\r\n      options.shadow.node = {};\r\n    }\r\n    if(options.shadow.node.blur === undefined) {\r\n      options.shadow.node.blur = 8;\r\n    }\r\n    if(options.shadow.node.color === undefined) {\r\n      options.shadow.node.color = \"rgba(0, 0, 0, 0.25)\";\r\n    }\r\n    if(options.shadow.node.offsetX === undefined) {\r\n      options.shadow.node.offsetX = 0;\r\n    }\r\n    if(options.shadow.node.offsetY === undefined) {\r\n      options.shadow.node.offsetY = 4;\r\n    }\r\n    if(options.shadow.path === undefined) {\r\n      options.shadow.path = {};\r\n    }\r\n    if(options.shadow.path.blur === undefined) {\r\n      options.shadow.path.blur = 1;\r\n    }\r\n    if(options.shadow.path.color === undefined) {\r\n      options.shadow.path.color = \"rgba(0, 0, 0, 0.25)\";\r\n    }\r\n    if(options.shadow.path.offsetX === undefined) {\r\n      options.shadow.path.offsetX = 0;\r\n    }\r\n    if(options.shadow.path.offsetY === undefined) {\r\n      options.shadow.path.offsetY = 4;\r\n    }\r\n    if(options.shadow.text === undefined) {\r\n      options.shadow.text = {};\r\n    }\r\n    if(options.shadow.text.blur === undefined) {\r\n      options.shadow.text.blur = 1;\r\n    }\r\n    if(options.shadow.text.color === undefined) {\r\n      options.shadow.text.color = \"rgba(0, 0, 0, 0.3)\";\r\n    }\r\n    if(options.shadow.text.offsetX === undefined) {\r\n      options.shadow.text.offsetX = 0;\r\n    }\r\n    if(options.shadow.text.offsetY === undefined) {\r\n      options.shadow.text.offsetY = 0;\r\n    }\r\n\r\n    this.stage = new CanvasStage(id);\r\n    this.camera = new Camera(0, 0, this.stage.getWidth() / 2, this.stage.getHeight() / 2, 1);\r\n    this.tree = new Tree(json, this.stage);\r\n    this.renderer = new CanvasRenderer(this.camera, <CanvasStage>this.stage, this.tree, options);\r\n    this.eventSystem = new EventSystem(this.camera, this.renderer, this.stage, this.tree);\r\n  }\r\n}\r\n\r\n/*\r\n// Example of options object.\r\noptions = {\r\n  node: {\r\n    color: \"#FFAA55\",\r\n    rounded: 5,\r\n    margin: 32,\r\n    padding: 5,\r\n    stroke: {\r\n      color: \"#000\"\r\n      size: 0\r\n    },\r\n    selected {\r\n      color: \"#FFAA55\",\r\n      stroke: {\r\n        color: \"#000\"\r\n        size: 0\r\n      }\r\n    }\r\n  },\r\n  path: {\r\n    color: \"#55AAFF\",\r\n    size: 2\r\n  },\r\n  text: {\r\n    color: \"#FFF\",\r\n    family: \"Arial\",\r\n    size: 18,\r\n    stroke: {\r\n      color: \"#000\",\r\n      size: 0\r\n    }\r\n  },\r\n  shadow: {\r\n    node: {\r\n      blur: 8,\r\n      color: \"rgba(0, 0, 0, 0.25)\",\r\n      offsetX: 0,\r\n      offsetY: 4\r\n    },\r\n    path: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    },\r\n    text: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n(<any>window).TreesJS = TreesJS;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}