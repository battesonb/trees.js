{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Components/Camera.ts","src/Components/Canvas.ts","src/Components/Colliders/AABB.ts","src/Components/Colliders/Collider.ts","src/Components/EventSystem.ts","src/Components/Renderer.ts","src/Components/SpatialHash.ts","src/Models/Node.ts","src/Models/Tree.ts","src/Types/Point2D.ts","src/main.ts"],"names":[],"mappings":"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","file":"trees.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Point2D from \"../Types/Point2D\";\r\n\r\nexport default class Camera {\r\n  position: Point2D;\r\n  _zoom: number;\r\n\r\n  constructor(x: number = 0, y: number = 0, zoom: number = 1) {\r\n    this.position = new Point2D(x, y);\r\n    this.setZoom(zoom);\r\n  }\r\n\r\n  setZoom(zoom: number) {\r\n    this._zoom = Math.max(0.5, Math.min(50, zoom));\r\n  }\r\n\r\n  getZoom(): number {\r\n    return this._zoom;\r\n  }\r\n\r\n  decZoom(amt: number) {\r\n    this.setZoom(this._zoom - amt);\r\n  }\r\n}","export default class Canvas {\r\n  dom: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n\r\n  _fontSize: number;\r\n  _fontFamily: string;\r\n\r\n  constructor(id: string) {\r\n    this.dom = <HTMLCanvasElement>document.getElementById(id);\r\n    this.context = this.dom.getContext(\"2d\");\r\n\r\n    this.context.textBaseline = \"top\";\r\n\r\n    this._fontSize = 18;\r\n    this._fontFamily = \"Arial\";\r\n    this._updateFont();\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.dom.width;\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.dom.height;\r\n  }\r\n\r\n  clear(): void {\r\n    this.context.clearRect(0, 0, this.dom.width, this.dom.height);\r\n  }\r\n\r\n  getTextWidth(text: string): number {\r\n    return this.context.measureText(text).width;\r\n  }\r\n\r\n  setFill(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.fillStyle = style;\r\n  }\r\n\r\n  setStroke(style: string | CanvasGradient | CanvasPattern): void {\r\n    this.context.strokeStyle = style;\r\n  }\r\n\r\n  setStrokeSize(size: number = 1): void {\r\n    this.context.lineWidth = size;\r\n  }\r\n\r\n  setFontSize(size: number): void {\r\n    this._fontSize = size;\r\n    this._updateFont();\r\n  }\r\n\r\n  setFontFamily(family: string): void {\r\n    this._fontFamily = family;\r\n    this._updateFont();\r\n  }\r\n\r\n  _updateFont(): void {\r\n    this.context.font = this._fontSize + \"px \" + this._fontFamily;\r\n  }\r\n\r\n  drawRect(x: number, y: number, w: number, h: number, stroke?: boolean, shadow?: boolean): void {\r\n    if(stroke) {\r\n      this.context.strokeRect(x, y, w, h);\r\n    } else {\r\n      this.context.fillRect(x, y, w, h);\r\n    }\r\n  }\r\n  \r\n  drawArc(x: number, y: number, r: number, startAngle: number, endAngle: number, stroke?: boolean): void {\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, r, startAngle, endAngle);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  drawLine(x1: number, y1: number, x2: number, y2: number): void {\r\n    this.context.beginPath();\r\n    this.context.moveTo(x1, y1);\r\n    this.context.lineTo(x2, y2);\r\n    this.context.closePath();\r\n    this.context.stroke();\r\n  }\r\n\r\n  // TODO add line-wrap\r\n  drawText(text: string, x: number, y: number, stroke?: boolean, maxWidth?: number): void {\r\n    if(stroke) {\r\n      this.context.strokeText(text, x, y);\r\n    } else {\r\n      this.context.fillText(text, x, y);\r\n    }\r\n  }\r\n\r\n  drawRoundedRect(x: number, y: number, w: number, h: number, r: number, stroke?: boolean): void {\r\n    if (w < 2 * r) r = w / 2;\r\n    if (h < 2 * r) r = h / 2;\r\n    this.context.beginPath();\r\n    this.context.moveTo(x + r, y);\r\n    this.context.arcTo(x + w, y, x + w, y + h, r);\r\n    this.context.arcTo(x + w, y + h, x, y + h, r);\r\n    this.context.arcTo(x, y + h, x, y, r);\r\n    this.context.arcTo(x, y, x + w, y, r);\r\n    this.context.closePath();\r\n    if(stroke) {\r\n      this.context.stroke();\r\n    } else {\r\n      this.context.fill();\r\n    }\r\n  }\r\n\r\n  enableShadows(blur: number, offsetX: number = 0, offsetY: number = 0, color: string = \"black\") {\r\n    this.context.shadowBlur = 8;\r\n    this.context.shadowColor = color;\r\n    this.context.shadowOffsetX = offsetX;\r\n    this.context.shadowOffsetY = offsetY;\r\n  }\r\n\r\n  clearShadows() {\r\n    this.context.shadowBlur = 0;\r\n    this.context.shadowOffsetX = 0;\r\n    this.context.shadowOffsetY = 0;\r\n  }\r\n}","import Collider from \"./Collider\";\r\nimport Point2D from \"../../Types/Point2D\";\r\n\r\n/**\r\n * Represents an AABB with top-left alignment.\r\n */\r\nexport default class AABB extends Collider {\r\n  _width: number;\r\n  _height: number;\r\n\r\n  constructor(x: number, y: number, width: number = 0, height: number = 0) {\r\n    super(x, y);\r\n    this._width = width;\r\n    this._height = height;\r\n  }\r\n\r\n  contains(x: number, y: number): boolean {\r\n    return x >= this.position.x && y >= this.position.y && x <= this.position.x + this.width() && y <= this.position.x + this.height();\r\n  }\r\n\r\n  overlaps(other: Collider): boolean {\r\n    if(other instanceof AABB) {\r\n      return Math.abs(this.position.x - other.position.x) * 2 < this.width() + other.width() &&\r\n             Math.abs(this.position.y - other.position.y) * 2 < this.height() + other.height();\r\n    }\r\n    throw Error(\"Unknown collider type, cannot determine overlap.\");\r\n  }\r\n\r\n  topLeft(): Point2D {\r\n    return this.position;\r\n  }\r\n\r\n  height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  width(): number {\r\n    return this._width;\r\n  }\r\n}","import Point2D from \"../../Types/Point2D\";\r\n\r\nexport default abstract class Collider {\r\n  position: Point2D;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.position = new Point2D(x, y);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given point is within the collider.\r\n   * @param x\r\n   * @param y \r\n   */\r\n  abstract contains(x: number, y: number): boolean;\r\n\r\n  /**\r\n   * Returns true if the collider overlaps with the given collider.\r\n   * @param collider \r\n   */\r\n  abstract overlaps(other: Collider): boolean;\r\n\r\n  /**\r\n   * Returns the top-left position of the collider.\r\n   */\r\n  abstract topLeft(): Point2D;\r\n\r\n  abstract height(): number;\r\n  abstract width(): number;\r\n}","import Camera from \"./Camera\";\r\nimport Canvas from \"./Canvas\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport Renderer from \"./Renderer\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nlet self: EventSystem;\r\n\r\nexport default class EventSystem {\r\n  _camera: Camera;\r\n  _canvas: Canvas;\r\n  _currentNode: Node;\r\n  _clientX: number;\r\n  _clientY: number;\r\n  _hash: SpatialHash;\r\n  _renderer: Renderer;\r\n\r\n  constructor(camera: Camera, renderer: Renderer, canvas: Canvas, tree: Tree) {\r\n    self = this; // Ugly, but binds require handlers.\r\n    this._hash = new SpatialHash(150); // TODO deterrmine this using the node sizes!\r\n    this._camera = camera;\r\n    this._canvas = canvas;\r\n    this._currentNode = null;\r\n    this._renderer = renderer;\r\n\r\n    tree.each((node: Node) => {\r\n      this._hash.add(node);\r\n    });\r\n\r\n    this._canvas.dom.addEventListener(\"mousedown\", this.mouseDown);\r\n    this._canvas.dom.addEventListener(\"mousewheel\", this.mouseWheel);\r\n\r\n    this.redraw();\r\n  }\r\n\r\n  mouseDown(event: MouseEvent) {\r\n    self._currentNode = <Node>self._hash.find(event.clientX / self._camera.getZoom() - self._camera.position.x, event.clientY / self._camera.getZoom() - self._camera.position.y);\r\n    \r\n    self._clientX = event.clientX;\r\n    self._clientY = event.clientY;\r\n    window.addEventListener(\"mousemove\", self.mouseMove);\r\n    window.addEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  mouseWheel(event: MouseWheelEvent) {\r\n    self._camera.decZoom(event.deltaY / 100);\r\n    self.redraw();\r\n  }\r\n\r\n  mouseMove(event: MouseEvent) {\r\n    let dx = (event.clientX - self._clientX) / self._camera.getZoom();\r\n    let dy = (event.clientY - self._clientY) / self._camera.getZoom();\r\n    if(self._currentNode === null) {\r\n      self._camera.position.x+= dx;\r\n      self._camera.position.y+= dy;\r\n    } else {\r\n      self._hash.move(self._currentNode, dx, dy);\r\n    }\r\n    \r\n    self.redraw();\r\n\r\n    self._clientX = event.clientX;\r\n    self._clientY = event.clientY;\r\n  }\r\n\r\n  mouseUp(event: MouseEvent) {\r\n    console.log(self._hash);\r\n    self._currentNode = null;\r\n    window.removeEventListener(\"mousemove\", self.mouseMove);\r\n    window.removeEventListener(\"mouseup\", self.mouseUp);\r\n  }\r\n\r\n  redraw(): void {\r\n    self._renderer.clear();\r\n    self._renderer.drawTree();\r\n    //self._renderer.drawHashGroups(self._hash); // Debug\r\n  }\r\n}","import Canvas from \"./Canvas\";\r\nimport Camera from \"./Camera\";\r\nimport Node from \"../Models/Node\";\r\nimport Tree from \"../Models/Tree\";\r\nimport SpatialHash from \"./SpatialHash\";\r\n\r\nexport default class Renderer {\r\n  _canvas: Canvas;\r\n  _camera: Camera;\r\n  _tree: Tree;\r\n  _options: any;\r\n  \r\n  constructor(camera: Camera, canvas: Canvas, tree: Tree, options: any) {\r\n    this._canvas = canvas;\r\n    this._camera = camera;\r\n    this._tree = tree;\r\n    this._options = options;\r\n\r\n    this._canvas.setFontFamily(options.text.family);\r\n  }\r\n\r\n  clear(): void {\r\n    this._canvas.clear();\r\n  }\r\n\r\n  drawTree(): void {\r\n    this._tree.each((node: Node) => {\r\n      this.drawPaths(node);\r\n    });\r\n\r\n    this._tree.each((node: Node) => {\r\n      this.drawNode(node);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A debugging method for visualising how the spatial hash looks.\r\n   */\r\n  drawHashGroups(hash: SpatialHash): void {\r\n    this._canvas.setStroke(\"55AAFF\");\r\n    this._canvas.setStrokeSize(1);\r\n    this._canvas.clearShadows();\r\n\r\n    let hor = (this._camera.position.x % hash._bucketSize) * this._camera._zoom;\r\n    while(hor < this._canvas.getWidth()) {\r\n      this._canvas.drawLine(hor, 0, hor, this._canvas.getHeight());\r\n      hor += hash._bucketSize * this._camera._zoom;\r\n    }\r\n\r\n    let vert = (this._camera.position.y % hash._bucketSize) * this._camera._zoom;\r\n    while(vert < this._canvas.getHeight()) {\r\n      this._canvas.drawLine(0, vert, this._canvas.getWidth(), vert);\r\n      vert += hash._bucketSize * this._camera._zoom;\r\n    }\r\n  }\r\n\r\n  drawNode(node: Node): void {\r\n    if(this._options.shadow.node.blur > 0) {\r\n      this._canvas.enableShadows(this._options.shadow.node.blur, this._options.shadow.node.offsetX, this._options.shadow.node.offsetY, this._options.shadow.node.color);\r\n    } else {\r\n      this._canvas.clearShadows();\r\n    }\r\n    this._canvas.setStroke(this._options.node.stroke.color);\r\n    this._canvas.setStrokeSize(this._options.node.stroke.size);\r\n    this._canvas.setFill(this._options.node.color);\r\n    this._canvas.drawRoundedRect((node.position.x + this._camera.position.x) * this._camera.getZoom(), (node.position.y + this._camera.position.y) * this._camera.getZoom(), node.width() * this._camera.getZoom(), node.height() * this._camera.getZoom(), this._options.node.rounded * this._camera.getZoom(), false);\r\n  \r\n    if(this._options.shadow.text.blur > 0) {\r\n      this._canvas.enableShadows(this._options.shadow.text.blur, this._options.shadow.text.offsetX, this._options.shadow.text.offsetY, this._options.shadow.text.color);\r\n    } else {\r\n      this._canvas.clearShadows();\r\n    }\r\n    this._canvas.setFontSize(this._options.text.size * this._camera.getZoom());\r\n    this._canvas.setStroke(this._options.text.stroke.color);\r\n    this._canvas.setStrokeSize(this._options.text.stroke.size);\r\n    this._canvas.setFill(this._options.text.color);\r\n    this._canvas.drawText(node.getText(), (node.position.x + this._camera.position.x) * this._camera.getZoom(), (node.position.y + this._camera.position.y) * this._camera.getZoom(), this._options.text.stroke.size > 0, 100 * this._camera.getZoom());\r\n  }\r\n\r\n  drawPaths(node: Node): void {\r\n    if(this._options.shadow.path.blur > 0) {\r\n      this._canvas.enableShadows(this._options.shadow.path.blur, this._options.shadow.path.offsetX, this._options.shadow.path.offsetY, this._options.shadow.path.color);\r\n    } else {\r\n      this._canvas.clearShadows();\r\n    }\r\n    this._canvas.setStroke(this._options.path.color);\r\n    this._canvas.setStrokeSize(this._options.path.size);\r\n    for(let i = 0; i < node._children.length; i++) {\r\n      this._canvas.drawLine((node.position.x + node.width() / 2 + this._camera.position.x) * this._camera.getZoom(), (node.position.y + node.height() / 2 + this._camera.position.y) * this._camera.getZoom(), (node._children[i].position.x + node._children[i].width() / 2 + this._camera.position.x) * this._camera.getZoom(), (node._children[i].position.y + node._children[i].height() / 2 + this._camera.position.y) * this._camera.getZoom());\r\n    }\r\n  }\r\n}","import Collider from './Colliders/Collider';\r\nimport Point2D from '../Types/Point2D';\r\n\r\n/**\r\n * A spatial hash based on AABB world coordinates.\r\n */\r\nexport default class SpatialHash {\r\n  _bucketSize: number;\r\n  _inverseBucketSize: number;\r\n  _map: object;\r\n\r\n  constructor(bucketSize: number = 24) {\r\n    this._map = {};\r\n    this._bucketSize = bucketSize;\r\n    this._inverseBucketSize = 1 / bucketSize;\r\n  }\r\n\r\n  /**\r\n   * Given a collider, return the points within the hash in which the collider lies.\r\n   * @param collider The collider\r\n   */\r\n  getPoints(collider: Collider) : Array<Point2D> {\r\n    let points: Array<Point2D> = [];\r\n    let moveH: number = 0;\r\n    let position: Point2D = collider.topLeft();\r\n    let width: number = collider.width();\r\n    let height: number = collider.height();\r\n    while(true) {\r\n      let moveV: number = 0;\r\n      while(true) {\r\n        let x: number = position.x + moveH;\r\n        let y: number = position.y + moveV;\r\n        points.push(new Point2D(x, y));\r\n        moveV+= this._bucketSize;\r\n        if (moveV > height) {\r\n          break;\r\n        }        \r\n      }\r\n      moveH+= this._bucketSize;\r\n      if (moveH > width) {\r\n        break;\r\n      }\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Add a collider to the hash, assuming it is not already within the hash.\r\n   * @param collider\r\n   */\r\n  add(collider: Collider) : void {\r\n    let points: Array<Point2D> = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this._map[hash] === undefined) {\r\n        this._map[hash] = new Set();\r\n      }\r\n      this._map[hash].add(collider);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes the given collider from the hash and deletes any empty sets in the process.\r\n   * @param collider\r\n   * @return true if collider is removed, false otherwise.\r\n   */\r\n  remove(collider: Collider) : boolean {\r\n    let removed: boolean = false;\r\n    let points: Array<Point2D>  = this.getPoints(collider);\r\n\r\n    points.forEach(point => {\r\n      let hash = this.toHashLong(point.x, point.y);\r\n      if(this._map[hash] !== undefined) {\r\n        if(this._map[hash].delete(collider)) {\r\n          removed = true;\r\n          if(this._map[hash].size == 0) {\r\n            delete this._map[hash];\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return an array of all colliders in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  getNearby(x: number, y: number): Array<Collider> {\r\n    let hash = this.toHashLong(x, y);\r\n    console.log(hash);\r\n    let set = this._map[hash];\r\n    if(set) {\r\n      return <Array<Collider>>Array.from(set);\r\n    }    \r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Given a world-point, return the first collider containing the world-point in the corresponding segment.\r\n   * @param x \r\n   * @param y \r\n   */\r\n  find(x: number, y: number): Collider {\r\n    let colliders: Array<Collider> = this.getNearby(x, y);\r\n    for(let i = 0; i < colliders.length; i++) {\r\n      if(colliders[i].contains(x, y)) {\r\n        return colliders[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Given a collider in the hash, move it by x and y points.\r\n   * @param collider\r\n   * @param x \r\n   * @param y \r\n   */\r\n  move(collider: Collider, x: number, y: number) : void {\r\n    this.remove(collider);\r\n    collider.position.x += x;\r\n    collider.position.y += y;\r\n    this.add(collider);\r\n  }\r\n\r\n  /**\r\n   * Convert a point to a unique 32-bit number representing the x/y coordinates in the hash.\r\n   * @param point\r\n   */\r\n  toHashLong(x: number, y: number): number {\r\n    x = Math.floor(x * this._inverseBucketSize) & 0xFFFF; // cast to 16-bit\r\n    y = (Math.floor(y * this._inverseBucketSize) & 0xFFFF) << 15; // cast to 16-bit and then shift 15-bits to the left.\r\n    return x | y;\r\n  }  \r\n}","import AABB from \"../Components/Colliders/AABB\";\r\n\r\n/**\r\n * The representation of a node of the tree.\r\n */\r\nexport default class Node extends AABB {\r\n  _id: number;\r\n  _children: Array<Node>;\r\n  _text: string;\r\n  parent: Node;\r\n\r\n  constructor(text: string, id: number = -1, x: number = 0, y: number = 0) {\r\n    super(x, y);\r\n    this.setText(text);\r\n    this.setId(id);\r\n    this._children = [];\r\n    this._width = 70; // TEMPORARY, TODO DELETE THIS\r\n    this._height = 24;\r\n  }\r\n\r\n  /**\r\n   * Sets the identifier of the node. Uniqueness of the identifier is not determined.\r\n   * @param id\r\n   */\r\n  setId(id: number): void {\r\n    this._id = id;\r\n  }\r\n\r\n  getId(): number {\r\n    return this._id;\r\n  }\r\n\r\n  setText(text: string): void {\r\n    this._text = text;\r\n  }\r\n\r\n  getText(): string {\r\n    return this._text;\r\n  }\r\n\r\n  /**\r\n   * Adds a child to the current node and sets the parent of the child as the object of the calling the method.\r\n   * @param child \r\n   */\r\n  addChild(child: Node): void {\r\n    this._children.push(child);\r\n    child.parent = this;\r\n  }\r\n\r\n  /**\r\n   * Gets the child with a specific identifier.\r\n   * TODO make faster with a binary search, maybe? Probably not though.\r\n   * @param id\r\n   */\r\n  getChild(id: number): Node {\r\n    for(let i = 0; i < this._children.length; i++) {\r\n      let child = this._children[i];\r\n      if(child.getId() === id) {\r\n        return child;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}","import Node from \"./Node\";\r\nimport Canvas from \"../Components/Canvas\";\r\n\r\nexport default class Tree {\r\n  _root: Node;\r\n\r\n  /**\r\n   * Builds the tree given a nested json object representing the nodes of the tree.\r\n   * Allowed attributes include: text, x, y, children, and id.\r\n   * @param json Representation of the tree.\r\n   * @param canvas Canvas object for measuring width/height and determining text-wrapping of nodes.\r\n   */\r\n  constructor(json: object, canvas: Canvas) {\r\n    this._addNode(json);\r\n  }\r\n\r\n  _addNode(descent: object, node?: Node) {\r\n    if(descent !== undefined) {\r\n      if(descent[\"text\"] !== undefined) {\r\n        let id = descent[\"id\"] !== undefined ? descent[\"id\"] : -1;\r\n        let x = descent[\"x\"] !== undefined ? descent[\"x\"] : 0;\r\n        let y = descent[\"y\"] !== undefined ? descent[\"y\"] : 0;\r\n        let child = new Node(descent[\"text\"], id, x, y);\r\n        if(node === undefined) {\r\n          this._root = child;\r\n          node = this._root;\r\n        } else {\r\n          node.addChild(child);\r\n        }\r\n        if(descent[\"children\"] !== undefined) {\r\n          for(let i = 0; i < descent[\"children\"].length; i++) {\r\n            this._addNode(descent[\"children\"][i], node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  each(callback: (node: Node) => any, node: Node = this._root): void {\r\n    if(node !== undefined && node !== null) {\r\n      for(let i = 0; i < node._children.length; i++) {\r\n        this.each(callback, node._children[i]);\r\n      }\r\n      callback(node);\r\n    }\r\n  }\r\n}","export default class Point2D {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}","import Camera from \"./Components/Camera\";\r\nimport Canvas from \"./Components/Canvas\";\r\nimport EventSystem from \"./Components/EventSystem\";\r\nimport Renderer from \"./Components/Renderer\";\r\nimport Tree from \"./Models/Tree\";\r\n\r\nexport default class TreesJS {\r\n  _camera: Camera;\r\n  _canvas: Canvas;\r\n  _eventSystem: EventSystem;\r\n  _renderer: Renderer;\r\n  _tree: Tree;\r\n\r\n  constructor(id: string, json: object, options?: any) {\r\n    if(options === undefined) {\r\n      options = {};\r\n    }\r\n\r\n    if(options.node === undefined) {\r\n      options.node = {};\r\n    }\r\n    if(options.node.color === undefined) {\r\n      options.node.color = \"#FFAA55\";\r\n    }\r\n    if(options.node.rounded === undefined) {\r\n      options.node.rounded = 4;\r\n    }\r\n    if(options.node.stroke === undefined) {\r\n      options.node.stroke = {};\r\n    }\r\n    if(options.node.stroke.color === undefined) {\r\n      options.node.stroke.color = \"#000\";\r\n    }\r\n    if(options.node.stroke.size === undefined) {\r\n      options.node.stroke.size = 0;\r\n    }\r\n\r\n    if(options.path === undefined) {\r\n      options.path = {};\r\n    }\r\n    if(options.path.color === undefined) {\r\n      options.path.color = \"#55AAFF\";\r\n    }\r\n    if(options.path.size === undefined) {\r\n      options.path.size = 2;\r\n    }\r\n\r\n    if(options.text === undefined) {\r\n      options.text = {};\r\n    }\r\n    if(options.text.color === undefined) {\r\n      options.text.color = \"#FFF\";\r\n    }\r\n    if(options.text.family === undefined) {\r\n      options.text.family = \"Arial\";\r\n    }\r\n    if(options.text.size === undefined) {\r\n      options.text.size = 18;\r\n    }\r\n    if(options.text.stroke === undefined) {\r\n      options.text.stroke = {};\r\n    }\r\n    if(options.text.stroke.color === undefined) {\r\n      options.text.stroke.color = \"#000\";\r\n    }\r\n    if(options.text.stroke.size === undefined) {\r\n      options.text.stroke.size = 0;\r\n    }\r\n\r\n    if(options.shadow === undefined) {\r\n      options.shadow = {};\r\n    }\r\n    if(options.shadow.node === undefined) {\r\n      options.shadow.node = {};\r\n    }\r\n    if(options.shadow.node.blur === undefined) {\r\n      options.shadow.node.blur = 8;\r\n    }\r\n    if(options.shadow.node.color === undefined) {\r\n      options.shadow.node.color = \"rgba(0, 0, 0, 0.25)\";\r\n    }\r\n    if(options.shadow.node.offsetX === undefined) {\r\n      options.shadow.node.offsetX = 0;\r\n    }\r\n    if(options.shadow.node.offsetY === undefined) {\r\n      options.shadow.node.offsetY = 4;\r\n    }\r\n    if(options.shadow.path === undefined) {\r\n      options.shadow.path = {};\r\n    }\r\n    if(options.shadow.path.blur === undefined) {\r\n      options.shadow.path.blur = 0;\r\n    }\r\n    if(options.shadow.path.color === undefined) {\r\n      options.shadow.path.color = \"#000\";\r\n    }\r\n    if(options.shadow.path.offsetX === undefined) {\r\n      options.shadow.path.offsetX = 0;\r\n    }\r\n    if(options.shadow.path.offsetY === undefined) {\r\n      options.shadow.path.offsetY = 0;\r\n    }\r\n    if(options.shadow.text === undefined) {\r\n      options.shadow.text = {};\r\n    }\r\n    if(options.shadow.text.blur === undefined) {\r\n      options.shadow.text.blur = 1;\r\n    }\r\n    if(options.shadow.text.color === undefined) {\r\n      options.shadow.text.color = \"rgba(0, 0, 0, 0.3)\";\r\n    }\r\n    if(options.shadow.text.offsetX === undefined) {\r\n      options.shadow.text.offsetX = 0;\r\n    }\r\n    if(options.shadow.text.offsetY === undefined) {\r\n      options.shadow.text.offsetY = 0;\r\n    }\r\n\r\n    this._camera = new Camera(0, 0, 1);\r\n    this._canvas = new Canvas(id);\r\n    this._tree = new Tree(json, this._canvas);\r\n    this._renderer = new Renderer(this._camera, this._canvas, this._tree, options);\r\n    this._eventSystem = new EventSystem(this._camera, this._renderer, this._canvas, this._tree);\r\n  }\r\n}\r\n\r\n/*\r\n// Example of options object.\r\noptions = {\r\n  node: {\r\n    color: \"#FFAA55\",\r\n    rounded: 5,\r\n    stroke: {\r\n      color: \"#000\"\r\n      size: 0\r\n    }\r\n  },\r\n  path: {\r\n    color: \"#55AAFF\",\r\n    size: 2\r\n  },\r\n  text: {\r\n    color: \"#FFF\",\r\n    family: \"Arial\",\r\n    size: 18,\r\n    stroke: {\r\n      color: \"#000\",\r\n      size: 0\r\n    }\r\n  },\r\n  shadow: {\r\n    node: {\r\n      blur: 8,\r\n      color: \"rgba(0, 0, 0, 0.25)\",\r\n      offsetX: 0,\r\n      offsetY: 4\r\n    },\r\n    path: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    },\r\n    text: {\r\n      blur: 0,\r\n      color: \"#000\",\r\n      offsetX: 0,\r\n      offsetY: 0\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n(<any>window).TreesJS = TreesJS;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvQ29tcG9uZW50cy9DYW1lcmEudHMiLCJzcmMvQ29tcG9uZW50cy9DYW52YXMudHMiLCJzcmMvQ29tcG9uZW50cy9Db2xsaWRlcnMvQUFCQi50cyIsInNyYy9Db21wb25lbnRzL0NvbGxpZGVycy9Db2xsaWRlci50cyIsInNyYy9Db21wb25lbnRzL0V2ZW50U3lzdGVtLnRzIiwic3JjL0NvbXBvbmVudHMvUmVuZGVyZXIudHMiLCJzcmMvQ29tcG9uZW50cy9TcGF0aWFsSGFzaC50cyIsInNyYy9Nb2RlbHMvTm9kZS50cyIsInNyYy9Nb2RlbHMvVHJlZS50cyIsInNyYy9UeXBlcy9Qb2ludDJELnRzIiwic3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUNBQSwwQkFBdUM7QUFFdkM7QUFJRSxnQkFBWSxJQUFZLEFBQUMsR0FBRSxJQUFZLEFBQUMsR0FBRSxPQUFlLEFBQUM7QUFDeEQsQUFBSSxhQUFDLEFBQVEsV0FBRyxJQUFJLFVBQU8sUUFBQyxBQUFDLEdBQUUsQUFBQyxBQUFDLEFBQUM7QUFDbEMsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsQUFBQyxBQUNyQjtBQUFDO0FBRUQsQUFBTyxZQUFDLEFBQVk7QUFDbEIsQUFBSSxhQUFDLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUcsS0FBRSxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUUsSUFBRSxBQUFJLEFBQUMsQUFBQyxBQUFDLEFBQ2pEO0FBQUM7QUFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFDcEI7QUFBQztBQUVELEFBQU8sWUFBQyxBQUFXO0FBQ2pCLEFBQUksYUFBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQUssUUFBRyxBQUFHLEFBQUMsQUFBQyxBQUNqQztBQUFDLEFBQ0Y7O0FBcEJELGtCQW9CQzs7Ozs7O0FDdEJEO0FB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QUFDLEFBQU8sUUFBQyxBQUFRLFNBQUMsQUFBQyxBQUFDLEtBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFPLEFBQUUsV0FBRSxDQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBUSxTQUFDLEFBQUMsQUFBQyxLQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBTyxBQUFFLFdBQUUsQUFBSSxLQUFDLEFBQUssQUFBRSxVQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBTyxBQUFFLFdBQUUsQUFBSSxLQUFDLEFBQU0sQUFBRSxXQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBTyxBQUFFLFdBQUUsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBTyxVQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBTyxBQUFFLFdBQUUsQUFBSyxBQUFDLEFBQUM7QUFFcFQsQUFBRSxZQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFJLE9BQUcsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUN0QyxBQUFJLGlCQUFDLEFBQU8sUUFBQyxBQUFhLGNBQUMsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBTyxTQUFFLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFPLFNBQUUsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3BLO0FBQUMsQUFBQyxBQUFJLGVBQUMsQUFBQztBQUNOLEFBQUksaUJBQUMsQUFBTyxRQUFDLEFBQVksQUFBRSxBQUFDLEFBQzlCO0FBQUM7QUFDRCxBQUFJLGFBQUMsQUFBTyxRQUFDLEFBQVcsWUFBQyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUksS0FBQyxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFPLEFBQUUsQUFBQyxBQUFDO0FBQzNFLEFBQUksYUFBQyxBQUFPLFFBQUMsQUFBUyxVQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUMsQUFBQztBQUN4RCxBQUFJLGFBQUMsQUFBTyxRQUFDLEFBQWEsY0FBQyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBSSxBQUFDLEFBQUM7QUFDM0QsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUM7QUFDL0MsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFRLFNBQUMsQUFBSSxLQUFDLEFBQU8sQUFBRSxXQUFFLENBQUMsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFDLElBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFRLFNBQUMsQUFBQyxBQUFDLEtBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFPLEFBQUUsV0FBRSxDQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBUSxTQUFDLEFBQUMsQUFBQyxLQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBTyxBQUFFLFdBQUUsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQUksT0FBRyxBQUFDLEdBQUUsQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBTyxBQUFFLEFBQUMsQUFBQyxBQUN0UDtBQUFDO0FBRUQsQUFBUyxjQUFDLEFBQVU7QUFDbEIsQUFBRSxZQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFJLE9BQUcsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUN0QyxBQUFJLGlCQUFDLEFBQU8sUUFBQyxBQUFhLGNBQUMsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBTyxTQUFFLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFPLFNBQUUsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3BLO0FBQUMsQUFBQyxBQUFJLGVBQUMsQUFBQztBQUNOLEFBQUksaUJBQUMsQUFBTyxRQUFDLEFBQVksQUFBRSxBQUFDLEFBQzlCO0FBQUM7QUFDRCxBQUFJLGFBQUMsQUFBTyxRQUFDLEFBQVMsVUFBQyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQztBQUNqRCxBQUFJLGFBQUMsQUFBTyxRQUFDLEFBQWEsY0FBQyxBQUFJLEtBQUMsQUFBUSxTQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUNwRCxBQUFHLGFBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQU0sUUFBRSxBQUFDLEFBQUUsS0FBRSxBQUFDO0FBQzlDLEFBQUksaUJBQUMsQUFBTyxRQUFDLEFBQVEsU0FBQyxDQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFLLEFBQUUsVUFBRyxBQUFDLElBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFRLFNBQUMsQUFBQyxBQUFDLEtBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFPLEFBQUUsV0FBRSxDQUFDLEFBQUksS0FBQyxBQUFRLFNBQUMsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFNLEFBQUUsV0FBRyxBQUFDLElBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFRLFNBQUMsQUFBQyxBQUFDLEtBQUcsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFPLEFBQUUsV0FBRSxDQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBQyxBQUFDLEdBQUMsQUFBUSxTQUFDLEFBQUMsSUFBRyxBQUFJLEtBQUMs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QUM3QyxBQUFPLG9CQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBTyxVQUFHLEFBQUMsQUFBQyxBQUNsQztBQUFDO0FBRUQsQUFBSSxhQUFDLEFBQU8sVUFBRyxJQUFJLFNBQU0sUUFBQyxBQUFDLEdBQUUsQUFBQyxHQUFFLEFBQUMsQUFBQyxBQUFDO0FBQ25DLEFBQUksYUFBQyxBQUFPLFVBQUcsSUFBSSxTQUFNLFFBQUMsQUFBRSxBQUFDLEFBQUM7QUFDOUIsQUFBSSxhQUFDLEFBQUssUUFBRyxJQUFJLE9BQUksUUFBQyxBQUFJLE1BQUUsQUFBSSxLQUFDLEFBQU8sQUFBQyxBQUFDO0FBQzFDLEFBQUksYUFBQyxBQUFTLFlBQUcsSUFBSSxXQUFRLFFBQUMsQUFBSSxLQUFDLEFBQU8sU0FBRSxBQUFJLEtBQUMsQUFBTyxTQUFFLEFBQUksS0FBQyxBQUFLLE9BQUUsQUFBTyxBQUFDLEFBQUM7QUFDL0UsQUFBSSxhQUFDLEFBQVksZUFBRyxJQUFJLGNBQVcsUUFBQyxBQUFJLEtBQUMsQUFBTyxTQUFFLEFBQUksS0FBQyxBQUFTLFdBQUUsQUFBSSxLQUFDLEFBQU8sU0FBRSxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUMsQUFDOUY7QUFBQyxBQUNGOztBQXRIRCxrQkFzSEM7QUFFRCxBQTZDRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVJLEFBQU8sT0FBQyxBQUFPLFVBQUcsQUFBTyxBQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCBQb2ludDJEIGZyb20gXCIuLi9UeXBlcy9Qb2ludDJEXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmEge1xyXG4gIHBvc2l0aW9uOiBQb2ludDJEO1xyXG4gIF96b29tOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIHpvb206IG51bWJlciA9IDEpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUG9pbnQyRCh4LCB5KTtcclxuICAgIHRoaXMuc2V0Wm9vbSh6b29tKTtcclxuICB9XHJcblxyXG4gIHNldFpvb20oem9vbTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl96b29tID0gTWF0aC5tYXgoMC41LCBNYXRoLm1pbig1MCwgem9vbSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Wm9vbSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3pvb207XHJcbiAgfVxyXG5cclxuICBkZWNab29tKGFtdDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnNldFpvb20odGhpcy5fem9vbSAtIGFtdCk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcclxuICBkb206IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcbiAgX2ZvbnRTaXplOiBudW1iZXI7XHJcbiAgX2ZvbnRGYW1pbHk6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5kb20gPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5kb20uZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgIHRoaXMuY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xyXG5cclxuICAgIHRoaXMuX2ZvbnRTaXplID0gMTg7XHJcbiAgICB0aGlzLl9mb250RmFtaWx5ID0gXCJBcmlhbFwiO1xyXG4gICAgdGhpcy5fdXBkYXRlRm9udCgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0V2lkdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmRvbS53aWR0aDtcclxuICB9XHJcblxyXG4gIGdldEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZG9tLmhlaWdodDtcclxuICB9XHJcblxyXG4gIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmRvbS53aWR0aCwgdGhpcy5kb20uaGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIGdldFRleHRXaWR0aCh0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcclxuICB9XHJcblxyXG4gIHNldEZpbGwoc3R5bGU6IHN0cmluZyB8IENhbnZhc0dyYWRpZW50IHwgQ2FudmFzUGF0dGVybik6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHN0eWxlO1xyXG4gIH1cclxuXHJcbiAgc2V0U3Ryb2tlKHN0eWxlOiBzdHJpbmcgfCBDYW52YXNHcmFkaWVudCB8IENhbnZhc1BhdHRlcm4pOiB2b2lkIHtcclxuICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IHN0eWxlO1xyXG4gIH1cclxuXHJcbiAgc2V0U3Ryb2tlU2l6ZShzaXplOiBudW1iZXIgPSAxKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gc2l6ZTtcclxuICB9XHJcblxyXG4gIHNldEZvbnRTaXplKHNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fZm9udFNpemUgPSBzaXplO1xyXG4gICAgdGhpcy5fdXBkYXRlRm9udCgpO1xyXG4gIH1cclxuXHJcbiAgc2V0Rm9udEZhbWlseShmYW1pbHk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5fZm9udEZhbWlseSA9IGZhbWlseTtcclxuICAgIHRoaXMuX3VwZGF0ZUZvbnQoKTtcclxuICB9XHJcblxyXG4gIF91cGRhdGVGb250KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0LmZvbnQgPSB0aGlzLl9mb250U2l6ZSArIFwicHggXCIgKyB0aGlzLl9mb250RmFtaWx5O1xyXG4gIH1cclxuXHJcbiAgZHJhd1JlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyLCBzdHJva2U/OiBib29sZWFuLCBzaGFkb3c/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZihzdHJva2UpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZVJlY3QoeCwgeSwgdywgaCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGRyYXdBcmMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHI6IG51bWJlciwgc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyLCBzdHJva2U/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjKHgsIHksIHIsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcclxuICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGlmKHN0cm9rZSkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJhd0xpbmUoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4MSwgeTEpO1xyXG4gICAgdGhpcy5jb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xyXG4gICAgdGhpcy5jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyBhZGQgbGluZS13cmFwXHJcbiAgZHJhd1RleHQodGV4dDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgc3Ryb2tlPzogYm9vbGVhbiwgbWF4V2lkdGg/OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmKHN0cm9rZSkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCB4LCB5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdSb3VuZGVkUmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIHI6IG51bWJlciwgc3Ryb2tlPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKHcgPCAyICogcikgciA9IHcgLyAyO1xyXG4gICAgaWYgKGggPCAyICogcikgciA9IGggLyAyO1xyXG4gICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4ICsgciwgeSk7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjVG8oeCArIHcsIHksIHggKyB3LCB5ICsgaCwgcik7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjVG8oeCArIHcsIHkgKyBoLCB4LCB5ICsgaCwgcik7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjVG8oeCwgeSArIGgsIHgsIHksIHIpO1xyXG4gICAgdGhpcy5jb250ZXh0LmFyY1RvKHgsIHksIHggKyB3LCB5LCByKTtcclxuICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGlmKHN0cm9rZSkge1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW5hYmxlU2hhZG93cyhibHVyOiBudW1iZXIsIG9mZnNldFg6IG51bWJlciA9IDAsIG9mZnNldFk6IG51bWJlciA9IDAsIGNvbG9yOiBzdHJpbmcgPSBcImJsYWNrXCIpIHtcclxuICAgIHRoaXMuY29udGV4dC5zaGFkb3dCbHVyID0gODtcclxuICAgIHRoaXMuY29udGV4dC5zaGFkb3dDb2xvciA9IGNvbG9yO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFggPSBvZmZzZXRYO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFkgPSBvZmZzZXRZO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJTaGFkb3dzKCkge1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd0JsdXIgPSAwO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFggPSAwO1xyXG4gICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gIH1cclxufSIsImltcG9ydCBDb2xsaWRlciBmcm9tIFwiLi9Db2xsaWRlclwiO1xyXG5pbXBvcnQgUG9pbnQyRCBmcm9tIFwiLi4vLi4vVHlwZXMvUG9pbnQyRFwiO1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gQUFCQiB3aXRoIHRvcC1sZWZ0IGFsaWdubWVudC5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFBQkIgZXh0ZW5kcyBDb2xsaWRlciB7XHJcbiAgX3dpZHRoOiBudW1iZXI7XHJcbiAgX2hlaWdodDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciA9IDAsIGhlaWdodDogbnVtYmVyID0gMCkge1xyXG4gICAgc3VwZXIoeCwgeSk7XHJcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgY29udGFpbnMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB4ID49IHRoaXMucG9zaXRpb24ueCAmJiB5ID49IHRoaXMucG9zaXRpb24ueSAmJiB4IDw9IHRoaXMucG9zaXRpb24ueCArIHRoaXMud2lkdGgoKSAmJiB5IDw9IHRoaXMucG9zaXRpb24ueCArIHRoaXMuaGVpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICBvdmVybGFwcyhvdGhlcjogQ29sbGlkZXIpOiBib29sZWFuIHtcclxuICAgIGlmKG90aGVyIGluc3RhbmNlb2YgQUFCQikge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnModGhpcy5wb3NpdGlvbi54IC0gb3RoZXIucG9zaXRpb24ueCkgKiAyIDwgdGhpcy53aWR0aCgpICsgb3RoZXIud2lkdGgoKSAmJlxyXG4gICAgICAgICAgICAgTWF0aC5hYnModGhpcy5wb3NpdGlvbi55IC0gb3RoZXIucG9zaXRpb24ueSkgKiAyIDwgdGhpcy5oZWlnaHQoKSArIG90aGVyLmhlaWdodCgpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgRXJyb3IoXCJVbmtub3duIGNvbGxpZGVyIHR5cGUsIGNhbm5vdCBkZXRlcm1pbmUgb3ZlcmxhcC5cIik7XHJcbiAgfVxyXG5cclxuICB0b3BMZWZ0KCk6IFBvaW50MkQge1xyXG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBoZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XHJcbiAgfVxyXG5cclxuICB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xyXG4gIH1cclxufSIsImltcG9ydCBQb2ludDJEIGZyb20gXCIuLi8uLi9UeXBlcy9Qb2ludDJEXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBDb2xsaWRlciB7XHJcbiAgcG9zaXRpb246IFBvaW50MkQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFBvaW50MkQoeCwgeSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBvaW50IGlzIHdpdGhpbiB0aGUgY29sbGlkZXIuXHJcbiAgICogQHBhcmFtIHhcclxuICAgKiBAcGFyYW0geSBcclxuICAgKi9cclxuICBhYnN0cmFjdCBjb250YWlucyh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29sbGlkZXIgb3ZlcmxhcHMgd2l0aCB0aGUgZ2l2ZW4gY29sbGlkZXIuXHJcbiAgICogQHBhcmFtIGNvbGxpZGVyIFxyXG4gICAqL1xyXG4gIGFic3RyYWN0IG92ZXJsYXBzKG90aGVyOiBDb2xsaWRlcik6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHRvcC1sZWZ0IHBvc2l0aW9uIG9mIHRoZSBjb2xsaWRlci5cclxuICAgKi9cclxuICBhYnN0cmFjdCB0b3BMZWZ0KCk6IFBvaW50MkQ7XHJcblxyXG4gIGFic3RyYWN0IGhlaWdodCgpOiBudW1iZXI7XHJcbiAgYWJzdHJhY3Qgd2lkdGgoKTogbnVtYmVyO1xyXG59IiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9DYW1lcmFcIjtcclxuaW1wb3J0IENhbnZhcyBmcm9tIFwiLi9DYW52YXNcIjtcclxuaW1wb3J0IE5vZGUgZnJvbSBcIi4uL01vZGVscy9Ob2RlXCI7XHJcbmltcG9ydCBUcmVlIGZyb20gXCIuLi9Nb2RlbHMvVHJlZVwiO1xyXG5pbXBvcnQgUmVuZGVyZXIgZnJvbSBcIi4vUmVuZGVyZXJcIjtcclxuaW1wb3J0IFNwYXRpYWxIYXNoIGZyb20gXCIuL1NwYXRpYWxIYXNoXCI7XHJcblxyXG5sZXQgc2VsZjogRXZlbnRTeXN0ZW07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFN5c3RlbSB7XHJcbiAgX2NhbWVyYTogQ2FtZXJhO1xyXG4gIF9jYW52YXM6IENhbnZhcztcclxuICBfY3VycmVudE5vZGU6IE5vZGU7XHJcbiAgX2NsaWVudFg6IG51bWJlcjtcclxuICBfY2xpZW50WTogbnVtYmVyO1xyXG4gIF9oYXNoOiBTcGF0aWFsSGFzaDtcclxuICBfcmVuZGVyZXI6IFJlbmRlcmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjYW1lcmE6IENhbWVyYSwgcmVuZGVyZXI6IFJlbmRlcmVyLCBjYW52YXM6IENhbnZhcywgdHJlZTogVHJlZSkge1xyXG4gICAgc2VsZiA9IHRoaXM7IC8vIFVnbHksIGJ1dCBiaW5kcyByZXF1aXJlIGhhbmRsZXJzLlxyXG4gICAgdGhpcy5faGFzaCA9IG5ldyBTcGF0aWFsSGFzaCgxNTApOyAvLyBUT0RPIGRldGVycm1pbmUgdGhpcyB1c2luZyB0aGUgbm9kZSBzaXplcyFcclxuICAgIHRoaXMuX2NhbWVyYSA9IGNhbWVyYTtcclxuICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcclxuICAgIHRoaXMuX2N1cnJlbnROb2RlID0gbnVsbDtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcblxyXG4gICAgdHJlZS5lYWNoKChub2RlOiBOb2RlKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhc2guYWRkKG5vZGUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FudmFzLmRvbS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2VEb3duKTtcclxuICAgIHRoaXMuX2NhbnZhcy5kb20uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNld2hlZWxcIiwgdGhpcy5tb3VzZVdoZWVsKTtcclxuXHJcbiAgICB0aGlzLnJlZHJhdygpO1xyXG4gIH1cclxuXHJcbiAgbW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICBzZWxmLl9jdXJyZW50Tm9kZSA9IDxOb2RlPnNlbGYuX2hhc2guZmluZChldmVudC5jbGllbnRYIC8gc2VsZi5fY2FtZXJhLmdldFpvb20oKSAtIHNlbGYuX2NhbWVyYS5wb3NpdGlvbi54LCBldmVudC5jbGllbnRZIC8gc2VsZi5fY2FtZXJhLmdldFpvb20oKSAtIHNlbGYuX2NhbWVyYS5wb3NpdGlvbi55KTtcclxuICAgIFxyXG4gICAgc2VsZi5fY2xpZW50WCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICBzZWxmLl9jbGllbnRZID0gZXZlbnQuY2xpZW50WTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHNlbGYubW91c2VNb3ZlKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBzZWxmLm1vdXNlVXApO1xyXG4gIH1cclxuXHJcbiAgbW91c2VXaGVlbChldmVudDogTW91c2VXaGVlbEV2ZW50KSB7XHJcbiAgICBzZWxmLl9jYW1lcmEuZGVjWm9vbShldmVudC5kZWx0YVkgLyAxMDApO1xyXG4gICAgc2VsZi5yZWRyYXcoKTtcclxuICB9XHJcblxyXG4gIG1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgbGV0IGR4ID0gKGV2ZW50LmNsaWVudFggLSBzZWxmLl9jbGllbnRYKSAvIHNlbGYuX2NhbWVyYS5nZXRab29tKCk7XHJcbiAgICBsZXQgZHkgPSAoZXZlbnQuY2xpZW50WSAtIHNlbGYuX2NsaWVudFkpIC8gc2VsZi5fY2FtZXJhLmdldFpvb20oKTtcclxuICAgIGlmKHNlbGYuX2N1cnJlbnROb2RlID09PSBudWxsKSB7XHJcbiAgICAgIHNlbGYuX2NhbWVyYS5wb3NpdGlvbi54Kz0gZHg7XHJcbiAgICAgIHNlbGYuX2NhbWVyYS5wb3NpdGlvbi55Kz0gZHk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZWxmLl9oYXNoLm1vdmUoc2VsZi5fY3VycmVudE5vZGUsIGR4LCBkeSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNlbGYucmVkcmF3KCk7XHJcblxyXG4gICAgc2VsZi5fY2xpZW50WCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICBzZWxmLl9jbGllbnRZID0gZXZlbnQuY2xpZW50WTtcclxuICB9XHJcblxyXG4gIG1vdXNlVXAoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIGNvbnNvbGUubG9nKHNlbGYuX2hhc2gpO1xyXG4gICAgc2VsZi5fY3VycmVudE5vZGUgPSBudWxsO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2VsZi5tb3VzZU1vdmUpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHNlbGYubW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICByZWRyYXcoKTogdm9pZCB7XHJcbiAgICBzZWxmLl9yZW5kZXJlci5jbGVhcigpO1xyXG4gICAgc2VsZi5fcmVuZGVyZXIuZHJhd1RyZWUoKTtcclxuICAgIC8vc2VsZi5fcmVuZGVyZXIuZHJhd0hhc2hHcm91cHMoc2VsZi5faGFzaCk7IC8vIERlYnVnXHJcbiAgfVxyXG59IiwiaW1wb3J0IENhbnZhcyBmcm9tIFwiLi9DYW52YXNcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9DYW1lcmFcIjtcclxuaW1wb3J0IE5vZGUgZnJvbSBcIi4uL01vZGVscy9Ob2RlXCI7XHJcbmltcG9ydCBUcmVlIGZyb20gXCIuLi9Nb2RlbHMvVHJlZVwiO1xyXG5pbXBvcnQgU3BhdGlhbEhhc2ggZnJvbSBcIi4vU3BhdGlhbEhhc2hcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcclxuICBfY2FudmFzOiBDYW52YXM7XHJcbiAgX2NhbWVyYTogQ2FtZXJhO1xyXG4gIF90cmVlOiBUcmVlO1xyXG4gIF9vcHRpb25zOiBhbnk7XHJcbiAgXHJcbiAgY29uc3RydWN0b3IoY2FtZXJhOiBDYW1lcmEsIGNhbnZhczogQ2FudmFzLCB0cmVlOiBUcmVlLCBvcHRpb25zOiBhbnkpIHtcclxuICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcclxuICAgIHRoaXMuX2NhbWVyYSA9IGNhbWVyYTtcclxuICAgIHRoaXMuX3RyZWUgPSB0cmVlO1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgdGhpcy5fY2FudmFzLnNldEZvbnRGYW1pbHkob3B0aW9ucy50ZXh0LmZhbWlseSk7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpOiB2b2lkIHtcclxuICAgIHRoaXMuX2NhbnZhcy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgZHJhd1RyZWUoKTogdm9pZCB7XHJcbiAgICB0aGlzLl90cmVlLmVhY2goKG5vZGU6IE5vZGUpID0+IHtcclxuICAgICAgdGhpcy5kcmF3UGF0aHMobm9kZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl90cmVlLmVhY2goKG5vZGU6IE5vZGUpID0+IHtcclxuICAgICAgdGhpcy5kcmF3Tm9kZShub2RlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQSBkZWJ1Z2dpbmcgbWV0aG9kIGZvciB2aXN1YWxpc2luZyBob3cgdGhlIHNwYXRpYWwgaGFzaCBsb29rcy5cclxuICAgKi9cclxuICBkcmF3SGFzaEdyb3VwcyhoYXNoOiBTcGF0aWFsSGFzaCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY2FudmFzLnNldFN0cm9rZShcIjU1QUFGRlwiKTtcclxuICAgIHRoaXMuX2NhbnZhcy5zZXRTdHJva2VTaXplKDEpO1xyXG4gICAgdGhpcy5fY2FudmFzLmNsZWFyU2hhZG93cygpO1xyXG5cclxuICAgIGxldCBob3IgPSAodGhpcy5fY2FtZXJhLnBvc2l0aW9uLnggJSBoYXNoLl9idWNrZXRTaXplKSAqIHRoaXMuX2NhbWVyYS5fem9vbTtcclxuICAgIHdoaWxlKGhvciA8IHRoaXMuX2NhbnZhcy5nZXRXaWR0aCgpKSB7XHJcbiAgICAgIHRoaXMuX2NhbnZhcy5kcmF3TGluZShob3IsIDAsIGhvciwgdGhpcy5fY2FudmFzLmdldEhlaWdodCgpKTtcclxuICAgICAgaG9yICs9IGhhc2guX2J1Y2tldFNpemUgKiB0aGlzLl9jYW1lcmEuX3pvb207XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHZlcnQgPSAodGhpcy5fY2FtZXJhLnBvc2l0aW9uLnkgJSBoYXNoLl9idWNrZXRTaXplKSAqIHRoaXMuX2NhbWVyYS5fem9vbTtcclxuICAgIHdoaWxlKHZlcnQgPCB0aGlzLl9jYW52YXMuZ2V0SGVpZ2h0KCkpIHtcclxuICAgICAgdGhpcy5fY2FudmFzLmRyYXdMaW5lKDAsIHZlcnQsIHRoaXMuX2NhbnZhcy5nZXRXaWR0aCgpLCB2ZXJ0KTtcclxuICAgICAgdmVydCArPSBoYXNoLl9idWNrZXRTaXplICogdGhpcy5fY2FtZXJhLl96b29tO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJhd05vZGUobm9kZTogTm9kZSk6IHZvaWQge1xyXG4gICAgaWYodGhpcy5fb3B0aW9ucy5zaGFkb3cubm9kZS5ibHVyID4gMCkge1xyXG4gICAgICB0aGlzLl9jYW52YXMuZW5hYmxlU2hhZG93cyh0aGlzLl9vcHRpb25zLnNoYWRvdy5ub2RlLmJsdXIsIHRoaXMuX29wdGlvbnMuc2hhZG93Lm5vZGUub2Zmc2V0WCwgdGhpcy5fb3B0aW9ucy5zaGFkb3cubm9kZS5vZmZzZXRZLCB0aGlzLl9vcHRpb25zLnNoYWRvdy5ub2RlLmNvbG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2NhbnZhcy5jbGVhclNoYWRvd3MoKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2NhbnZhcy5zZXRTdHJva2UodGhpcy5fb3B0aW9ucy5ub2RlLnN0cm9rZS5jb2xvcik7XHJcbiAgICB0aGlzLl9jYW52YXMuc2V0U3Ryb2tlU2l6ZSh0aGlzLl9vcHRpb25zLm5vZGUuc3Ryb2tlLnNpemUpO1xyXG4gICAgdGhpcy5fY2FudmFzLnNldEZpbGwodGhpcy5fb3B0aW9ucy5ub2RlLmNvbG9yKTtcclxuICAgIHRoaXMuX2NhbnZhcy5kcmF3Um91bmRlZFJlY3QoKG5vZGUucG9zaXRpb24ueCArIHRoaXMuX2NhbWVyYS5wb3NpdGlvbi54KSAqIHRoaXMuX2NhbWVyYS5nZXRab29tKCksIChub2RlLnBvc2l0aW9uLnkgKyB0aGlzLl9jYW1lcmEucG9zaXRpb24ueSkgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpLCBub2RlLndpZHRoKCkgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpLCBub2RlLmhlaWdodCgpICogdGhpcy5fY2FtZXJhLmdldFpvb20oKSwgdGhpcy5fb3B0aW9ucy5ub2RlLnJvdW5kZWQgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpLCBmYWxzZSk7XHJcbiAgXHJcbiAgICBpZih0aGlzLl9vcHRpb25zLnNoYWRvdy50ZXh0LmJsdXIgPiAwKSB7XHJcbiAgICAgIHRoaXMuX2NhbnZhcy5lbmFibGVTaGFkb3dzKHRoaXMuX29wdGlvbnMuc2hhZG93LnRleHQuYmx1ciwgdGhpcy5fb3B0aW9ucy5zaGFkb3cudGV4dC5vZmZzZXRYLCB0aGlzLl9vcHRpb25zLnNoYWRvdy50ZXh0Lm9mZnNldFksIHRoaXMuX29wdGlvbnMuc2hhZG93LnRleHQuY29sb3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fY2FudmFzLmNsZWFyU2hhZG93cygpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fY2FudmFzLnNldEZvbnRTaXplKHRoaXMuX29wdGlvbnMudGV4dC5zaXplICogdGhpcy5fY2FtZXJhLmdldFpvb20oKSk7XHJcbiAgICB0aGlzLl9jYW52YXMuc2V0U3Ryb2tlKHRoaXMuX29wdGlvbnMudGV4dC5zdHJva2UuY29sb3IpO1xyXG4gICAgdGhpcy5fY2FudmFzLnNldFN0cm9rZVNpemUodGhpcy5fb3B0aW9ucy50ZXh0LnN0cm9rZS5zaXplKTtcclxuICAgIHRoaXMuX2NhbnZhcy5zZXRGaWxsKHRoaXMuX29wdGlvbnMudGV4dC5jb2xvcik7XHJcbiAgICB0aGlzLl9jYW52YXMuZHJhd1RleHQobm9kZS5nZXRUZXh0KCksIChub2RlLnBvc2l0aW9uLnggKyB0aGlzLl9jYW1lcmEucG9zaXRpb24ueCkgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpLCAobm9kZS5wb3NpdGlvbi55ICsgdGhpcy5fY2FtZXJhLnBvc2l0aW9uLnkpICogdGhpcy5fY2FtZXJhLmdldFpvb20oKSwgdGhpcy5fb3B0aW9ucy50ZXh0LnN0cm9rZS5zaXplID4gMCwgMTAwICogdGhpcy5fY2FtZXJhLmdldFpvb20oKSk7XHJcbiAgfVxyXG5cclxuICBkcmF3UGF0aHMobm9kZTogTm9kZSk6IHZvaWQge1xyXG4gICAgaWYodGhpcy5fb3B0aW9ucy5zaGFkb3cucGF0aC5ibHVyID4gMCkge1xyXG4gICAgICB0aGlzLl9jYW52YXMuZW5hYmxlU2hhZG93cyh0aGlzLl9vcHRpb25zLnNoYWRvdy5wYXRoLmJsdXIsIHRoaXMuX29wdGlvbnMuc2hhZG93LnBhdGgub2Zmc2V0WCwgdGhpcy5fb3B0aW9ucy5zaGFkb3cucGF0aC5vZmZzZXRZLCB0aGlzLl9vcHRpb25zLnNoYWRvdy5wYXRoLmNvbG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2NhbnZhcy5jbGVhclNoYWRvd3MoKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2NhbnZhcy5zZXRTdHJva2UodGhpcy5fb3B0aW9ucy5wYXRoLmNvbG9yKTtcclxuICAgIHRoaXMuX2NhbnZhcy5zZXRTdHJva2VTaXplKHRoaXMuX29wdGlvbnMucGF0aC5zaXplKTtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBub2RlLl9jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0aGlzLl9jYW52YXMuZHJhd0xpbmUoKG5vZGUucG9zaXRpb24ueCArIG5vZGUud2lkdGgoKSAvIDIgKyB0aGlzLl9jYW1lcmEucG9zaXRpb24ueCkgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpLCAobm9kZS5wb3NpdGlvbi55ICsgbm9kZS5oZWlnaHQoKSAvIDIgKyB0aGlzLl9jYW1lcmEucG9zaXRpb24ueSkgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpLCAobm9kZS5fY2hpbGRyZW5baV0ucG9zaXRpb24ueCArIG5vZGUuX2NoaWxkcmVuW2ldLndpZHRoKCkgLyAyICsgdGhpcy5fY2FtZXJhLnBvc2l0aW9uLngpICogdGhpcy5fY2FtZXJhLmdldFpvb20oKSwgKG5vZGUuX2NoaWxkcmVuW2ldLnBvc2l0aW9uLnkgKyBub2RlLl9jaGlsZHJlbltpXS5oZWlnaHQoKSAvIDIgKyB0aGlzLl9jYW1lcmEucG9zaXRpb24ueSkgKiB0aGlzLl9jYW1lcmEuZ2V0Wm9vbSgpKTtcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgQ29sbGlkZXIgZnJvbSAnLi9Db2xsaWRlcnMvQ29sbGlkZXInO1xyXG5pbXBvcnQgUG9pbnQyRCBmcm9tICcuLi9UeXBlcy9Qb2ludDJEJztcclxuXHJcbi8qKlxyXG4gKiBBIHNwYXRpYWwgaGFzaCBiYXNlZCBvbiBBQUJCIHdvcmxkIGNvb3JkaW5hdGVzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BhdGlhbEhhc2gge1xyXG4gIF9idWNrZXRTaXplOiBudW1iZXI7XHJcbiAgX2ludmVyc2VCdWNrZXRTaXplOiBudW1iZXI7XHJcbiAgX21hcDogb2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihidWNrZXRTaXplOiBudW1iZXIgPSAyNCkge1xyXG4gICAgdGhpcy5fbWFwID0ge307XHJcbiAgICB0aGlzLl9idWNrZXRTaXplID0gYnVja2V0U2l6ZTtcclxuICAgIHRoaXMuX2ludmVyc2VCdWNrZXRTaXplID0gMSAvIGJ1Y2tldFNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHaXZlbiBhIGNvbGxpZGVyLCByZXR1cm4gdGhlIHBvaW50cyB3aXRoaW4gdGhlIGhhc2ggaW4gd2hpY2ggdGhlIGNvbGxpZGVyIGxpZXMuXHJcbiAgICogQHBhcmFtIGNvbGxpZGVyIFRoZSBjb2xsaWRlclxyXG4gICAqL1xyXG4gIGdldFBvaW50cyhjb2xsaWRlcjogQ29sbGlkZXIpIDogQXJyYXk8UG9pbnQyRD4ge1xyXG4gICAgbGV0IHBvaW50czogQXJyYXk8UG9pbnQyRD4gPSBbXTtcclxuICAgIGxldCBtb3ZlSDogbnVtYmVyID0gMDtcclxuICAgIGxldCBwb3NpdGlvbjogUG9pbnQyRCA9IGNvbGxpZGVyLnRvcExlZnQoKTtcclxuICAgIGxldCB3aWR0aDogbnVtYmVyID0gY29sbGlkZXIud2lkdGgoKTtcclxuICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IGNvbGxpZGVyLmhlaWdodCgpO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBsZXQgbW92ZVY6IG51bWJlciA9IDA7XHJcbiAgICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgICBsZXQgeDogbnVtYmVyID0gcG9zaXRpb24ueCArIG1vdmVIO1xyXG4gICAgICAgIGxldCB5OiBudW1iZXIgPSBwb3NpdGlvbi55ICsgbW92ZVY7XHJcbiAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50MkQoeCwgeSkpO1xyXG4gICAgICAgIG1vdmVWKz0gdGhpcy5fYnVja2V0U2l6ZTtcclxuICAgICAgICBpZiAobW92ZVYgPiBoZWlnaHQpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICAgIG1vdmVIKz0gdGhpcy5fYnVja2V0U2l6ZTtcclxuICAgICAgaWYgKG1vdmVIID4gd2lkdGgpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvaW50cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBhIGNvbGxpZGVyIHRvIHRoZSBoYXNoLCBhc3N1bWluZyBpdCBpcyBub3QgYWxyZWFkeSB3aXRoaW4gdGhlIGhhc2guXHJcbiAgICogQHBhcmFtIGNvbGxpZGVyXHJcbiAgICovXHJcbiAgYWRkKGNvbGxpZGVyOiBDb2xsaWRlcikgOiB2b2lkIHtcclxuICAgIGxldCBwb2ludHM6IEFycmF5PFBvaW50MkQ+ID0gdGhpcy5nZXRQb2ludHMoY29sbGlkZXIpO1xyXG5cclxuICAgIHBvaW50cy5mb3JFYWNoKHBvaW50ID0+IHtcclxuICAgICAgbGV0IGhhc2ggPSB0aGlzLnRvSGFzaExvbmcocG9pbnQueCwgcG9pbnQueSk7XHJcbiAgICAgIGlmKHRoaXMuX21hcFtoYXNoXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5fbWFwW2hhc2hdID0gbmV3IFNldCgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX21hcFtoYXNoXS5hZGQoY29sbGlkZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBjb2xsaWRlciBmcm9tIHRoZSBoYXNoIGFuZCBkZWxldGVzIGFueSBlbXB0eSBzZXRzIGluIHRoZSBwcm9jZXNzLlxyXG4gICAqIEBwYXJhbSBjb2xsaWRlclxyXG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBjb2xsaWRlciBpcyByZW1vdmVkLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICovXHJcbiAgcmVtb3ZlKGNvbGxpZGVyOiBDb2xsaWRlcikgOiBib29sZWFuIHtcclxuICAgIGxldCByZW1vdmVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBsZXQgcG9pbnRzOiBBcnJheTxQb2ludDJEPiAgPSB0aGlzLmdldFBvaW50cyhjb2xsaWRlcik7XHJcblxyXG4gICAgcG9pbnRzLmZvckVhY2gocG9pbnQgPT4ge1xyXG4gICAgICBsZXQgaGFzaCA9IHRoaXMudG9IYXNoTG9uZyhwb2ludC54LCBwb2ludC55KTtcclxuICAgICAgaWYodGhpcy5fbWFwW2hhc2hdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZih0aGlzLl9tYXBbaGFzaF0uZGVsZXRlKGNvbGxpZGVyKSkge1xyXG4gICAgICAgICAgcmVtb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICBpZih0aGlzLl9tYXBbaGFzaF0uc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9tYXBbaGFzaF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVtb3ZlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdpdmVuIGEgd29ybGQtcG9pbnQsIHJldHVybiBhbiBhcnJheSBvZiBhbGwgY29sbGlkZXJzIGluIHRoZSBjb3JyZXNwb25kaW5nIHNlZ21lbnQuXHJcbiAgICogQHBhcmFtIHggXHJcbiAgICogQHBhcmFtIHkgXHJcbiAgICovXHJcbiAgZ2V0TmVhcmJ5KHg6IG51bWJlciwgeTogbnVtYmVyKTogQXJyYXk8Q29sbGlkZXI+IHtcclxuICAgIGxldCBoYXNoID0gdGhpcy50b0hhc2hMb25nKHgsIHkpO1xyXG4gICAgY29uc29sZS5sb2coaGFzaCk7XHJcbiAgICBsZXQgc2V0ID0gdGhpcy5fbWFwW2hhc2hdO1xyXG4gICAgaWYoc2V0KSB7XHJcbiAgICAgIHJldHVybiA8QXJyYXk8Q29sbGlkZXI+PkFycmF5LmZyb20oc2V0KTtcclxuICAgIH0gICAgXHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHaXZlbiBhIHdvcmxkLXBvaW50LCByZXR1cm4gdGhlIGZpcnN0IGNvbGxpZGVyIGNvbnRhaW5pbmcgdGhlIHdvcmxkLXBvaW50IGluIHRoZSBjb3JyZXNwb25kaW5nIHNlZ21lbnQuXHJcbiAgICogQHBhcmFtIHggXHJcbiAgICogQHBhcmFtIHkgXHJcbiAgICovXHJcbiAgZmluZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IENvbGxpZGVyIHtcclxuICAgIGxldCBjb2xsaWRlcnM6IEFycmF5PENvbGxpZGVyPiA9IHRoaXMuZ2V0TmVhcmJ5KHgsIHkpO1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbGxpZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZihjb2xsaWRlcnNbaV0uY29udGFpbnMoeCwgeSkpIHtcclxuICAgICAgICByZXR1cm4gY29sbGlkZXJzW2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdpdmVuIGEgY29sbGlkZXIgaW4gdGhlIGhhc2gsIG1vdmUgaXQgYnkgeCBhbmQgeSBwb2ludHMuXHJcbiAgICogQHBhcmFtIGNvbGxpZGVyXHJcbiAgICogQHBhcmFtIHggXHJcbiAgICogQHBhcmFtIHkgXHJcbiAgICovXHJcbiAgbW92ZShjb2xsaWRlcjogQ29sbGlkZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSA6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmUoY29sbGlkZXIpO1xyXG4gICAgY29sbGlkZXIucG9zaXRpb24ueCArPSB4O1xyXG4gICAgY29sbGlkZXIucG9zaXRpb24ueSArPSB5O1xyXG4gICAgdGhpcy5hZGQoY29sbGlkZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBhIHBvaW50IHRvIGEgdW5pcXVlIDMyLWJpdCBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSB4L3kgY29vcmRpbmF0ZXMgaW4gdGhlIGhhc2guXHJcbiAgICogQHBhcmFtIHBvaW50XHJcbiAgICovXHJcbiAgdG9IYXNoTG9uZyh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICB4ID0gTWF0aC5mbG9vcih4ICogdGhpcy5faW52ZXJzZUJ1Y2tldFNpemUpICYgMHhGRkZGOyAvLyBjYXN0IHRvIDE2LWJpdFxyXG4gICAgeSA9IChNYXRoLmZsb29yKHkgKiB0aGlzLl9pbnZlcnNlQnVja2V0U2l6ZSkgJiAweEZGRkYpIDw8IDE1OyAvLyBjYXN0IHRvIDE2LWJpdCBhbmQgdGhlbiBzaGlmdCAxNS1iaXRzIHRvIHRoZSBsZWZ0LlxyXG4gICAgcmV0dXJuIHggfCB5O1xyXG4gIH0gIFxyXG59IiwiaW1wb3J0IEFBQkIgZnJvbSBcIi4uL0NvbXBvbmVudHMvQ29sbGlkZXJzL0FBQkJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVwcmVzZW50YXRpb24gb2YgYSBub2RlIG9mIHRoZSB0cmVlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9kZSBleHRlbmRzIEFBQkIge1xyXG4gIF9pZDogbnVtYmVyO1xyXG4gIF9jaGlsZHJlbjogQXJyYXk8Tm9kZT47XHJcbiAgX3RleHQ6IHN0cmluZztcclxuICBwYXJlbnQ6IE5vZGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgaWQ6IG51bWJlciA9IC0xLCB4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKSB7XHJcbiAgICBzdXBlcih4LCB5KTtcclxuICAgIHRoaXMuc2V0VGV4dCh0ZXh0KTtcclxuICAgIHRoaXMuc2V0SWQoaWQpO1xyXG4gICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcclxuICAgIHRoaXMuX3dpZHRoID0gNzA7IC8vIFRFTVBPUkFSWSwgVE9ETyBERUxFVEUgVEhJU1xyXG4gICAgdGhpcy5faGVpZ2h0ID0gMjQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBub2RlLiBVbmlxdWVuZXNzIG9mIHRoZSBpZGVudGlmaWVyIGlzIG5vdCBkZXRlcm1pbmVkLlxyXG4gICAqIEBwYXJhbSBpZFxyXG4gICAqL1xyXG4gIHNldElkKGlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgfVxyXG5cclxuICBnZXRJZCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dCh0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuX3RleHQgPSB0ZXh0O1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgY2hpbGQgdG8gdGhlIGN1cnJlbnQgbm9kZSBhbmQgc2V0cyB0aGUgcGFyZW50IG9mIHRoZSBjaGlsZCBhcyB0aGUgb2JqZWN0IG9mIHRoZSBjYWxsaW5nIHRoZSBtZXRob2QuXHJcbiAgICogQHBhcmFtIGNoaWxkIFxyXG4gICAqL1xyXG4gIGFkZENoaWxkKGNoaWxkOiBOb2RlKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBjaGlsZCB3aXRoIGEgc3BlY2lmaWMgaWRlbnRpZmllci5cclxuICAgKiBUT0RPIG1ha2UgZmFzdGVyIHdpdGggYSBiaW5hcnkgc2VhcmNoLCBtYXliZT8gUHJvYmFibHkgbm90IHRob3VnaC5cclxuICAgKiBAcGFyYW0gaWRcclxuICAgKi9cclxuICBnZXRDaGlsZChpZDogbnVtYmVyKTogTm9kZSB7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IGNoaWxkID0gdGhpcy5fY2hpbGRyZW5baV07XHJcbiAgICAgIGlmKGNoaWxkLmdldElkKCkgPT09IGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn0iLCJpbXBvcnQgTm9kZSBmcm9tIFwiLi9Ob2RlXCI7XHJcbmltcG9ydCBDYW52YXMgZnJvbSBcIi4uL0NvbXBvbmVudHMvQ2FudmFzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlIHtcclxuICBfcm9vdDogTm9kZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQnVpbGRzIHRoZSB0cmVlIGdpdmVuIGEgbmVzdGVkIGpzb24gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbm9kZXMgb2YgdGhlIHRyZWUuXHJcbiAgICogQWxsb3dlZCBhdHRyaWJ1dGVzIGluY2x1ZGU6IHRleHQsIHgsIHksIGNoaWxkcmVuLCBhbmQgaWQuXHJcbiAgICogQHBhcmFtIGpzb24gUmVwcmVzZW50YXRpb24gb2YgdGhlIHRyZWUuXHJcbiAgICogQHBhcmFtIGNhbnZhcyBDYW52YXMgb2JqZWN0IGZvciBtZWFzdXJpbmcgd2lkdGgvaGVpZ2h0IGFuZCBkZXRlcm1pbmluZyB0ZXh0LXdyYXBwaW5nIG9mIG5vZGVzLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGpzb246IG9iamVjdCwgY2FudmFzOiBDYW52YXMpIHtcclxuICAgIHRoaXMuX2FkZE5vZGUoanNvbik7XHJcbiAgfVxyXG5cclxuICBfYWRkTm9kZShkZXNjZW50OiBvYmplY3QsIG5vZGU/OiBOb2RlKSB7XHJcbiAgICBpZihkZXNjZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYoZGVzY2VudFtcInRleHRcIl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGxldCBpZCA9IGRlc2NlbnRbXCJpZFwiXSAhPT0gdW5kZWZpbmVkID8gZGVzY2VudFtcImlkXCJdIDogLTE7XHJcbiAgICAgICAgbGV0IHggPSBkZXNjZW50W1wieFwiXSAhPT0gdW5kZWZpbmVkID8gZGVzY2VudFtcInhcIl0gOiAwO1xyXG4gICAgICAgIGxldCB5ID0gZGVzY2VudFtcInlcIl0gIT09IHVuZGVmaW5lZCA/IGRlc2NlbnRbXCJ5XCJdIDogMDtcclxuICAgICAgICBsZXQgY2hpbGQgPSBuZXcgTm9kZShkZXNjZW50W1widGV4dFwiXSwgaWQsIHgsIHkpO1xyXG4gICAgICAgIGlmKG5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgdGhpcy5fcm9vdCA9IGNoaWxkO1xyXG4gICAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3Q7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5vZGUuYWRkQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihkZXNjZW50W1wiY2hpbGRyZW5cIl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRlc2NlbnRbXCJjaGlsZHJlblwiXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9hZGROb2RlKGRlc2NlbnRbXCJjaGlsZHJlblwiXVtpXSwgbm9kZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlYWNoKGNhbGxiYWNrOiAobm9kZTogTm9kZSkgPT4gYW55LCBub2RlOiBOb2RlID0gdGhpcy5fcm9vdCk6IHZvaWQge1xyXG4gICAgaWYobm9kZSAhPT0gdW5kZWZpbmVkICYmIG5vZGUgIT09IG51bGwpIHtcclxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5lYWNoKGNhbGxiYWNrLCBub2RlLl9jaGlsZHJlbltpXSk7XHJcbiAgICAgIH1cclxuICAgICAgY2FsbGJhY2sobm9kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnQyRCB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCkge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9Db21wb25lbnRzL0NhbWVyYVwiO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gXCIuL0NvbXBvbmVudHMvQ2FudmFzXCI7XHJcbmltcG9ydCBFdmVudFN5c3RlbSBmcm9tIFwiLi9Db21wb25lbnRzL0V2ZW50U3lzdGVtXCI7XHJcbmltcG9ydCBSZW5kZXJlciBmcm9tIFwiLi9Db21wb25lbnRzL1JlbmRlcmVyXCI7XHJcbmltcG9ydCBUcmVlIGZyb20gXCIuL01vZGVscy9UcmVlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmVlc0pTIHtcclxuICBfY2FtZXJhOiBDYW1lcmE7XHJcbiAgX2NhbnZhczogQ2FudmFzO1xyXG4gIF9ldmVudFN5c3RlbTogRXZlbnRTeXN0ZW07XHJcbiAgX3JlbmRlcmVyOiBSZW5kZXJlcjtcclxuICBfdHJlZTogVHJlZTtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywganNvbjogb2JqZWN0LCBvcHRpb25zPzogYW55KSB7XHJcbiAgICBpZihvcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmKG9wdGlvbnMubm9kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMubm9kZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5ub2RlLmNvbG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5ub2RlLmNvbG9yID0gXCIjRkZBQTU1XCI7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLm5vZGUucm91bmRlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMubm9kZS5yb3VuZGVkID0gNDtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMubm9kZS5zdHJva2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLm5vZGUuc3Ryb2tlID0ge307XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLm5vZGUuc3Ryb2tlLmNvbG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5ub2RlLnN0cm9rZS5jb2xvciA9IFwiIzAwMFwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5ub2RlLnN0cm9rZS5zaXplID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5ub2RlLnN0cm9rZS5zaXplID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBpZihvcHRpb25zLnBhdGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnBhdGggPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMucGF0aC5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMucGF0aC5jb2xvciA9IFwiIzU1QUFGRlwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5wYXRoLnNpemUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnBhdGguc2l6ZSA9IDI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYob3B0aW9ucy50ZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy50ZXh0ID0ge307XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnRleHQuY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnRleHQuY29sb3IgPSBcIiNGRkZcIjtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMudGV4dC5mYW1pbHkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnRleHQuZmFtaWx5ID0gXCJBcmlhbFwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy50ZXh0LnNpemUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnRleHQuc2l6ZSA9IDE4O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy50ZXh0LnN0cm9rZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMudGV4dC5zdHJva2UgPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMudGV4dC5zdHJva2UuY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnRleHQuc3Ryb2tlLmNvbG9yID0gXCIjMDAwXCI7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnRleHQuc3Ryb2tlLnNpemUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnRleHQuc3Ryb2tlLnNpemUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cgPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93Lm5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy5ub2RlID0ge307XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy5ub2RlLmJsdXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy5ub2RlLmJsdXIgPSA4O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cubm9kZS5jb2xvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93Lm5vZGUuY29sb3IgPSBcInJnYmEoMCwgMCwgMCwgMC4yNSlcIjtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93Lm5vZGUub2Zmc2V0WCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93Lm5vZGUub2Zmc2V0WCA9IDA7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy5ub2RlLm9mZnNldFkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy5ub2RlLm9mZnNldFkgPSA0O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cucGF0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93LnBhdGggPSB7fTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnBhdGguYmx1ciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93LnBhdGguYmx1ciA9IDA7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy5wYXRoLmNvbG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cucGF0aC5jb2xvciA9IFwiIzAwMFwiO1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cucGF0aC5vZmZzZXRYID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cucGF0aC5vZmZzZXRYID0gMDtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnBhdGgub2Zmc2V0WSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93LnBhdGgub2Zmc2V0WSA9IDA7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy50ZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cudGV4dCA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYob3B0aW9ucy5zaGFkb3cudGV4dC5ibHVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucy5zaGFkb3cudGV4dC5ibHVyID0gMTtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnRleHQuY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy50ZXh0LmNvbG9yID0gXCJyZ2JhKDAsIDAsIDAsIDAuMylcIjtcclxuICAgIH1cclxuICAgIGlmKG9wdGlvbnMuc2hhZG93LnRleHQub2Zmc2V0WCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG9wdGlvbnMuc2hhZG93LnRleHQub2Zmc2V0WCA9IDA7XHJcbiAgICB9XHJcbiAgICBpZihvcHRpb25zLnNoYWRvdy50ZXh0Lm9mZnNldFkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBvcHRpb25zLnNoYWRvdy50ZXh0Lm9mZnNldFkgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2NhbWVyYSA9IG5ldyBDYW1lcmEoMCwgMCwgMSk7XHJcbiAgICB0aGlzLl9jYW52YXMgPSBuZXcgQ2FudmFzKGlkKTtcclxuICAgIHRoaXMuX3RyZWUgPSBuZXcgVHJlZShqc29uLCB0aGlzLl9jYW52YXMpO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIodGhpcy5fY2FtZXJhLCB0aGlzLl9jYW52YXMsIHRoaXMuX3RyZWUsIG9wdGlvbnMpO1xyXG4gICAgdGhpcy5fZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0odGhpcy5fY2FtZXJhLCB0aGlzLl9yZW5kZXJlciwgdGhpcy5fY2FudmFzLCB0aGlzLl90cmVlKTtcclxuICB9XHJcbn1cclxuXHJcbi8qXHJcbi8vIEV4YW1wbGUgb2Ygb3B0aW9ucyBvYmplY3QuXHJcbm9wdGlvbnMgPSB7XHJcbiAgbm9kZToge1xyXG4gICAgY29sb3I6IFwiI0ZGQUE1NVwiLFxyXG4gICAgcm91bmRlZDogNSxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICBjb2xvcjogXCIjMDAwXCJcclxuICAgICAgc2l6ZTogMFxyXG4gICAgfVxyXG4gIH0sXHJcbiAgcGF0aDoge1xyXG4gICAgY29sb3I6IFwiIzU1QUFGRlwiLFxyXG4gICAgc2l6ZTogMlxyXG4gIH0sXHJcbiAgdGV4dDoge1xyXG4gICAgY29sb3I6IFwiI0ZGRlwiLFxyXG4gICAgZmFtaWx5OiBcIkFyaWFsXCIsXHJcbiAgICBzaXplOiAxOCxcclxuICAgIHN0cm9rZToge1xyXG4gICAgICBjb2xvcjogXCIjMDAwXCIsXHJcbiAgICAgIHNpemU6IDBcclxuICAgIH1cclxuICB9LFxyXG4gIHNoYWRvdzoge1xyXG4gICAgbm9kZToge1xyXG4gICAgICBibHVyOiA4LFxyXG4gICAgICBjb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuMjUpXCIsXHJcbiAgICAgIG9mZnNldFg6IDAsXHJcbiAgICAgIG9mZnNldFk6IDRcclxuICAgIH0sXHJcbiAgICBwYXRoOiB7XHJcbiAgICAgIGJsdXI6IDAsXHJcbiAgICAgIGNvbG9yOiBcIiMwMDBcIixcclxuICAgICAgb2Zmc2V0WDogMCxcclxuICAgICAgb2Zmc2V0WTogMFxyXG4gICAgfSxcclxuICAgIHRleHQ6IHtcclxuICAgICAgYmx1cjogMCxcclxuICAgICAgY29sb3I6IFwiIzAwMFwiLFxyXG4gICAgICBvZmZzZXRYOiAwLFxyXG4gICAgICBvZmZzZXRZOiAwXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiovXHJcblxyXG4oPGFueT53aW5kb3cpLlRyZWVzSlMgPSBUcmVlc0pTOyJdfQ=="}